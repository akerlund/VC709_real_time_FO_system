------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor: Xilinx
-- \   \   \/     Version : 3.6
--  \   \         Application : 7 Series FPGAs Transceivers Wizard 
--  /   /         Filename : gtwizard_0_exdes.vhd
-- /___/   /\      
-- \   \  /  \ 
--  \___\/\___\
--
--
-- Module gtwizard_0_exdes
-- Generated by Xilinx 7 Series FPGAs Transceivers Wizard
-- 
-- 
-- (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES. 


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;

--***********************************Entity Declaration************************

entity gtwizard_0_exdes is
generic
(
    EXAMPLE_CONFIG_INDEPENDENT_LANES        : integer   := 1;
    EXAMPLE_LANE_WITH_START_CHAR            : integer   := 0;    -- specifies lane with unique start frame ch
    EXAMPLE_WORDS_IN_BRAM                   : integer   := 512;  -- specifies amount of data in BRAM
    EXAMPLE_SIM_GTRESET_SPEEDUP             : string    := "TRUE";    -- simulation setting for GT SecureIP model
    STABLE_CLOCK_PERIOD                     : integer   := 10;
    EXAMPLE_USE_CHIPSCOPE                   : integer   := 0;           -- Set to 1 to use Chipscope to drive resets

    DATA_WIDTH : integer := 64;
    N_WIDTH    : integer := 127;
    K_WIDTH    : integer := 113;
    BUF_WIDTH  : integer := 16
);
port
(
    IIC_SCL_MAIN_LS             : inout std_logic;
    IIC_SDA_MAIN_LS             : inout std_logic;
    IIC_MUX_RESET_B_LS          : out std_logic;

    USB_UART_TX                 : in  std_logic;
    USB_UART_RX                 : out std_logic;

    SM_FAN_PWM                  : out std_logic;
    
    SI5324_RST_LS               : out std_logic;
        
    GPIO_LED                    : out std_logic_vector(7 downto 0);
    GPIO_DIP                    : in  std_logic_vector(7 downto 0);

    CPU_RESET                   : in  std_logic;
    GPIO_SW_C                   : in  std_logic;

    --SFP_LOS                     : in  std_logic_vector(3 downto 0);
    SFP_LOS_0                     : in  std_logic;
    --SFP_MOD_DETECT              : in  std_logic_vector(3 downto 0);
    SFP_TX_DISABLE              : out std_logic_vector(3 downto 0);
    --SFP_TX_FAULT                : in  std_logic_vector(3 downto 0);
    --SFP_RS0                     : out std_logic_vector(1 downto 0);
    --SFP_RS1                     : out std_logic_vector(1 downto 0);
    SFP_RX_N                    : in  std_logic_vector(3 downto 0);
    SFP_RX_P                    : in  std_logic_vector(3 downto 0);
    SFP_TX_N                    : out std_logic_vector(3 downto 0);
    SFP_TX_P                    : out std_logic_vector(3 downto 0);

    Q3_CLK1_GTREFCLK_PAD_N_IN               : in   std_logic;
    Q3_CLK1_GTREFCLK_PAD_P_IN               : in   std_logic;
    DRP_CLK_IN_P                            : in   std_logic;
    DRP_CLK_IN_N                            : in   std_logic
    --TRACK_DATA_OUT                          : out  std_logic;
);


end gtwizard_0_exdes;
    
architecture RTL of gtwizard_0_exdes is

    attribute DowngradeIPIdentifiedWarnings: string;
    attribute DowngradeIPIdentifiedWarnings of RTL : architecture is "yes";

    attribute CORE_GENERATION_INFO : string;
    attribute CORE_GENERATION_INFO of RTL : architecture is "gtwizard_0,gtwizard_v3_6_3,{protocol_file=10GBASE-R}";

--**************************Component Declarations*****************************

    
component gtwizard_0_support
generic
(
    -- Simulation attributes
    EXAMPLE_SIM_GTRESET_SPEEDUP    : string    := "FALSE";    -- Set to TRUE to speed up sim reset
    STABLE_CLOCK_PERIOD            : integer   := 10 
);
port
(
    SOFT_RESET_TX_IN                        : in   std_logic;
    SOFT_RESET_RX_IN                        : in   std_logic;
    DONT_RESET_ON_DATA_ERROR_IN             : in   std_logic;
    Q3_CLK1_GTREFCLK_PAD_N_IN               : in   std_logic;
    Q3_CLK1_GTREFCLK_PAD_P_IN               : in   std_logic;

    GT0_TX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT0_RX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT0_DATA_VALID_IN                       : in   std_logic;
    GT0_TX_MMCM_LOCK_OUT                    : out  std_logic;
    GT0_RX_MMCM_LOCK_OUT                    : out  std_logic;
    GT1_TX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT1_RX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT1_DATA_VALID_IN                       : in   std_logic;
    GT1_TX_MMCM_LOCK_OUT                    : out  std_logic;
    GT1_RX_MMCM_LOCK_OUT                    : out  std_logic;
    GT2_TX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT2_RX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT2_DATA_VALID_IN                       : in   std_logic;
    GT2_TX_MMCM_LOCK_OUT                    : out  std_logic;
    GT2_RX_MMCM_LOCK_OUT                    : out  std_logic;
    GT3_TX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT3_RX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT3_DATA_VALID_IN                       : in   std_logic;
    GT3_TX_MMCM_LOCK_OUT                    : out  std_logic;
    GT3_RX_MMCM_LOCK_OUT                    : out  std_logic;
 
    GT0_TXUSRCLK_OUT                        : out  std_logic;
    GT0_TXUSRCLK2_OUT                       : out  std_logic;
    GT0_RXUSRCLK_OUT                        : out  std_logic;
    GT0_RXUSRCLK2_OUT                       : out  std_logic;
 
    GT1_TXUSRCLK_OUT                        : out  std_logic;
    GT1_TXUSRCLK2_OUT                       : out  std_logic;
    GT1_RXUSRCLK_OUT                        : out  std_logic;
    GT1_RXUSRCLK2_OUT                       : out  std_logic;
 
    GT2_TXUSRCLK_OUT                        : out  std_logic;
    GT2_TXUSRCLK2_OUT                       : out  std_logic;
    GT2_RXUSRCLK_OUT                        : out  std_logic;
    GT2_RXUSRCLK2_OUT                       : out  std_logic;
 
    GT3_TXUSRCLK_OUT                        : out  std_logic;
    GT3_TXUSRCLK2_OUT                       : out  std_logic;
    GT3_RXUSRCLK_OUT                        : out  std_logic;
    GT3_RXUSRCLK2_OUT                       : out  std_logic;
    --_________________________________________________________________________
    --_________________________________________________________________________
    --GT0  (X1Y12)
    --____________________________CHANNEL PORTS________________________________
    ---------------------------- Channel - DRP Ports  --------------------------
    gt0_drpaddr_in                          : in   std_logic_vector(8 downto 0);
    gt0_drpdi_in                            : in   std_logic_vector(15 downto 0);
    gt0_drpdo_out                           : out  std_logic_vector(15 downto 0);
    gt0_drpen_in                            : in   std_logic;
    gt0_drprdy_out                          : out  std_logic;
    gt0_drpwe_in                            : in   std_logic;
    ------------------------------- Loopback Ports -----------------------------
    gt0_loopback_in                         : in   std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    gt0_rxrate_in                           : in   std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    gt0_eyescanreset_in                     : in   std_logic;
    gt0_rxuserrdy_in                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    gt0_eyescandataerror_out                : out  std_logic;
    gt0_eyescantrigger_in                   : in   std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt0_rxcdrhold_in                        : in   std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt0_dmonitorout_out                     : out  std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    gt0_rxdata_out                          : out  std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt0_rxprbserr_out                       : out  std_logic;
    gt0_rxprbssel_in                        : in   std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt0_rxprbscntreset_in                   : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt0_gthrxn_in                           : in   std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt0_rxbufreset_in                       : in   std_logic;
    gt0_rxbufstatus_out                     : out  std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt0_rxdfelpmreset_in                    : in   std_logic;
    gt0_rxmonitorout_out                    : out  std_logic_vector(6 downto 0);
    gt0_rxmonitorsel_in                     : in   std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt0_rxratedone_out                      : out  std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt0_rxoutclkfabric_out                  : out  std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    gt0_rxdatavalid_out                     : out  std_logic;
    gt0_rxheader_out                        : out  std_logic_vector(1 downto 0);
    gt0_rxheadervalid_out                   : out  std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    gt0_rxgearboxslip_in                    : in   std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt0_gtrxreset_in                        : in   std_logic;
    gt0_rxpcsreset_in                       : in   std_logic;
    gt0_rxpmareset_in                       : in   std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt0_rxlpmen_in                          : in   std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt0_rxpolarity_in                       : in   std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt0_gthrxp_in                           : in   std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt0_rxresetdone_out                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    gt0_txpostcursor_in                     : in   std_logic_vector(4 downto 0);
    gt0_txprecursor_in                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    gt0_gttxreset_in                        : in   std_logic;
    gt0_txuserrdy_in                        : in   std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    gt0_txheader_in                         : in   std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt0_txprbsforceerr_in                   : in   std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt0_txbufstatus_out                     : out  std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt0_txdiffctrl_in                       : in   std_logic_vector(3 downto 0);
    gt0_txinhibit_in                        : in   std_logic;
    gt0_txmaincursor_in                     : in   std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    gt0_txdata_in                           : in   std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt0_gthtxn_out                          : out  std_logic;
    gt0_gthtxp_out                          : out  std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt0_txoutclkfabric_out                  : out  std_logic;
    gt0_txoutclkpcs_out                     : out  std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    gt0_txsequence_in                       : in   std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt0_txpcsreset_in                       : in   std_logic;
    gt0_txresetdone_out                     : out  std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt0_txpolarity_in                       : in   std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt0_txprbssel_in                        : in   std_logic_vector(2 downto 0);

    --_________________________________________________________________________
    --_________________________________________________________________________
    --GT1  (X1Y13)
    --____________________________CHANNEL PORTS________________________________
    ---------------------------- Channel - DRP Ports  --------------------------
    gt1_drpaddr_in                          : in   std_logic_vector(8 downto 0);
    gt1_drpdi_in                            : in   std_logic_vector(15 downto 0);
    gt1_drpdo_out                           : out  std_logic_vector(15 downto 0);
    gt1_drpen_in                            : in   std_logic;
    gt1_drprdy_out                          : out  std_logic;
    gt1_drpwe_in                            : in   std_logic;
    ------------------------------- Loopback Ports -----------------------------
    gt1_loopback_in                         : in   std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    gt1_rxrate_in                           : in   std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    gt1_eyescanreset_in                     : in   std_logic;
    gt1_rxuserrdy_in                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    gt1_eyescandataerror_out                : out  std_logic;
    gt1_eyescantrigger_in                   : in   std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt1_rxcdrhold_in                        : in   std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt1_dmonitorout_out                     : out  std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    gt1_rxdata_out                          : out  std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt1_rxprbserr_out                       : out  std_logic;
    gt1_rxprbssel_in                        : in   std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt1_rxprbscntreset_in                   : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt1_gthrxn_in                           : in   std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt1_rxbufreset_in                       : in   std_logic;
    gt1_rxbufstatus_out                     : out  std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt1_rxdfelpmreset_in                    : in   std_logic;
    gt1_rxmonitorout_out                    : out  std_logic_vector(6 downto 0);
    gt1_rxmonitorsel_in                     : in   std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt1_rxratedone_out                      : out  std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt1_rxoutclkfabric_out                  : out  std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    gt1_rxdatavalid_out                     : out  std_logic;
    gt1_rxheader_out                        : out  std_logic_vector(1 downto 0);
    gt1_rxheadervalid_out                   : out  std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    gt1_rxgearboxslip_in                    : in   std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt1_gtrxreset_in                        : in   std_logic;
    gt1_rxpcsreset_in                       : in   std_logic;
    gt1_rxpmareset_in                       : in   std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt1_rxlpmen_in                          : in   std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt1_rxpolarity_in                       : in   std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt1_gthrxp_in                           : in   std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt1_rxresetdone_out                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    gt1_txpostcursor_in                     : in   std_logic_vector(4 downto 0);
    gt1_txprecursor_in                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    gt1_gttxreset_in                        : in   std_logic;
    gt1_txuserrdy_in                        : in   std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    gt1_txheader_in                         : in   std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt1_txprbsforceerr_in                   : in   std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt1_txbufstatus_out                     : out  std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt1_txdiffctrl_in                       : in   std_logic_vector(3 downto 0);
    gt1_txinhibit_in                        : in   std_logic;
    gt1_txmaincursor_in                     : in   std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    gt1_txdata_in                           : in   std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt1_gthtxn_out                          : out  std_logic;
    gt1_gthtxp_out                          : out  std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt1_txoutclkfabric_out                  : out  std_logic;
    gt1_txoutclkpcs_out                     : out  std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    gt1_txsequence_in                       : in   std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt1_txpcsreset_in                       : in   std_logic;
    gt1_txresetdone_out                     : out  std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt1_txpolarity_in                       : in   std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt1_txprbssel_in                        : in   std_logic_vector(2 downto 0);

    --_________________________________________________________________________
    --_________________________________________________________________________
    --GT2  (X1Y14)
    --____________________________CHANNEL PORTS________________________________
    ---------------------------- Channel - DRP Ports  --------------------------
    gt2_drpaddr_in                          : in   std_logic_vector(8 downto 0);
    gt2_drpdi_in                            : in   std_logic_vector(15 downto 0);
    gt2_drpdo_out                           : out  std_logic_vector(15 downto 0);
    gt2_drpen_in                            : in   std_logic;
    gt2_drprdy_out                          : out  std_logic;
    gt2_drpwe_in                            : in   std_logic;
    ------------------------------- Loopback Ports -----------------------------
    gt2_loopback_in                         : in   std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    gt2_rxrate_in                           : in   std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    gt2_eyescanreset_in                     : in   std_logic;
    gt2_rxuserrdy_in                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    gt2_eyescandataerror_out                : out  std_logic;
    gt2_eyescantrigger_in                   : in   std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt2_rxcdrhold_in                        : in   std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt2_dmonitorout_out                     : out  std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    gt2_rxdata_out                          : out  std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt2_rxprbserr_out                       : out  std_logic;
    gt2_rxprbssel_in                        : in   std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt2_rxprbscntreset_in                   : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt2_gthrxn_in                           : in   std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt2_rxbufreset_in                       : in   std_logic;
    gt2_rxbufstatus_out                     : out  std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt2_rxdfelpmreset_in                    : in   std_logic;
    gt2_rxmonitorout_out                    : out  std_logic_vector(6 downto 0);
    gt2_rxmonitorsel_in                     : in   std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt2_rxratedone_out                      : out  std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt2_rxoutclkfabric_out                  : out  std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    gt2_rxdatavalid_out                     : out  std_logic;
    gt2_rxheader_out                        : out  std_logic_vector(1 downto 0);
    gt2_rxheadervalid_out                   : out  std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    gt2_rxgearboxslip_in                    : in   std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt2_gtrxreset_in                        : in   std_logic;
    gt2_rxpcsreset_in                       : in   std_logic;
    gt2_rxpmareset_in                       : in   std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt2_rxlpmen_in                          : in   std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt2_rxpolarity_in                       : in   std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt2_gthrxp_in                           : in   std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt2_rxresetdone_out                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    gt2_txpostcursor_in                     : in   std_logic_vector(4 downto 0);
    gt2_txprecursor_in                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    gt2_gttxreset_in                        : in   std_logic;
    gt2_txuserrdy_in                        : in   std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    gt2_txheader_in                         : in   std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt2_txprbsforceerr_in                   : in   std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt2_txbufstatus_out                     : out  std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt2_txdiffctrl_in                       : in   std_logic_vector(3 downto 0);
    gt2_txinhibit_in                        : in   std_logic;
    gt2_txmaincursor_in                     : in   std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    gt2_txdata_in                           : in   std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt2_gthtxn_out                          : out  std_logic;
    gt2_gthtxp_out                          : out  std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt2_txoutclkfabric_out                  : out  std_logic;
    gt2_txoutclkpcs_out                     : out  std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    gt2_txsequence_in                       : in   std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt2_txpcsreset_in                       : in   std_logic;
    gt2_txresetdone_out                     : out  std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt2_txpolarity_in                       : in   std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt2_txprbssel_in                        : in   std_logic_vector(2 downto 0);

    --_________________________________________________________________________
    --_________________________________________________________________________
    --GT3  (X1Y15)
    --____________________________CHANNEL PORTS________________________________
    ---------------------------- Channel - DRP Ports  --------------------------
    gt3_drpaddr_in                          : in   std_logic_vector(8 downto 0);
    gt3_drpdi_in                            : in   std_logic_vector(15 downto 0);
    gt3_drpdo_out                           : out  std_logic_vector(15 downto 0);
    gt3_drpen_in                            : in   std_logic;
    gt3_drprdy_out                          : out  std_logic;
    gt3_drpwe_in                            : in   std_logic;
    ------------------------------- Loopback Ports -----------------------------
    gt3_loopback_in                         : in   std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    gt3_rxrate_in                           : in   std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    gt3_eyescanreset_in                     : in   std_logic;
    gt3_rxuserrdy_in                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    gt3_eyescandataerror_out                : out  std_logic;
    gt3_eyescantrigger_in                   : in   std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt3_rxcdrhold_in                        : in   std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt3_dmonitorout_out                     : out  std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    gt3_rxdata_out                          : out  std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt3_rxprbserr_out                       : out  std_logic;
    gt3_rxprbssel_in                        : in   std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt3_rxprbscntreset_in                   : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt3_gthrxn_in                           : in   std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt3_rxbufreset_in                       : in   std_logic;
    gt3_rxbufstatus_out                     : out  std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt3_rxdfelpmreset_in                    : in   std_logic;
    gt3_rxmonitorout_out                    : out  std_logic_vector(6 downto 0);
    gt3_rxmonitorsel_in                     : in   std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt3_rxratedone_out                      : out  std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt3_rxoutclkfabric_out                  : out  std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    gt3_rxdatavalid_out                     : out  std_logic;
    gt3_rxheader_out                        : out  std_logic_vector(1 downto 0);
    gt3_rxheadervalid_out                   : out  std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    gt3_rxgearboxslip_in                    : in   std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt3_gtrxreset_in                        : in   std_logic;
    gt3_rxpcsreset_in                       : in   std_logic;
    gt3_rxpmareset_in                       : in   std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt3_rxlpmen_in                          : in   std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt3_rxpolarity_in                       : in   std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt3_gthrxp_in                           : in   std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt3_rxresetdone_out                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    gt3_txpostcursor_in                     : in   std_logic_vector(4 downto 0);
    gt3_txprecursor_in                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    gt3_gttxreset_in                        : in   std_logic;
    gt3_txuserrdy_in                        : in   std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    gt3_txheader_in                         : in   std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt3_txprbsforceerr_in                   : in   std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt3_txbufstatus_out                     : out  std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt3_txdiffctrl_in                       : in   std_logic_vector(3 downto 0);
    gt3_txinhibit_in                        : in   std_logic;
    gt3_txmaincursor_in                     : in   std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    gt3_txdata_in                           : in   std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt3_gthtxn_out                          : out  std_logic;
    gt3_gthtxp_out                          : out  std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt3_txoutclkfabric_out                  : out  std_logic;
    gt3_txoutclkpcs_out                     : out  std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    gt3_txsequence_in                       : in   std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt3_txpcsreset_in                       : in   std_logic;
    gt3_txresetdone_out                     : out  std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt3_txpolarity_in                       : in   std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt3_txprbssel_in                        : in   std_logic_vector(2 downto 0);


    --____________________________COMMON PORTS________________________________
    GT0_QPLLLOCK_OUT : out std_logic;
    GT0_QPLLREFCLKLOST_OUT  : out std_logic;
    GT0_QPLLOUTCLK_OUT  : out std_logic;
    GT0_QPLLOUTREFCLK_OUT : out std_logic;

    sysclk_in : in std_logic
);
end component;

component gtwizard_0_BLOCK_SYNC_SM
generic
(
    SH_CNT_MAX         :  integer  := 64;
    SH_INVALID_CNT_MAX :  integer  := 16 
);
port
(
    BLOCKSYNC_OUT      : out   std_logic;
    RXGEARBOXSLIP_OUT  : out   std_logic;
    RXHEADER_IN        : in    std_logic_vector(2 downto 0);
    RXHEADERVALID_IN   : in    std_logic;
    USER_CLK           : in    std_logic;
    SYSTEM_RESET       : in    std_logic
);
end component;

component gtwizard_0_DESCRAMBLER
generic
( 
    RX_DATA_WIDTH            : integer := 64
);
port
(
    SCRAMBLED_DATA_IN        : in  std_logic_vector (63 downto 0);
    UNSCRAMBLED_DATA_OUT     : out std_logic_vector (63 downto 0);
    DATA_VALID_IN            : in  std_logic;
    USER_CLK                 : in  std_logic;      
    SYSTEM_RESET             : in  std_logic
);
end component;

component gtwizard_0_SCRAMBLER
generic
( 
    TX_DATA_WIDTH            : integer := 64
);
port
(
    UNSCRAMBLED_DATA_IN      : in  std_logic_vector (63 downto 0);
    SCRAMBLED_DATA_OUT       : out std_logic_vector (63 downto 0);
    DATA_VALID_IN            : in  std_logic;
    USER_CLK                 : in  std_logic;      
    SYSTEM_RESET             : in  std_logic
);
end component;

component gtwizard_0_GT_FRAME_GEN 
generic
(
     WORDS_IN_BRAM    : integer := 512
);
port
(
    -- User Interface
    TX_DATA_OUT             : out   std_logic_vector(79 downto 0);
    TXCTRL_OUT              : out   std_logic_vector(7 downto 0); 

    TXDATAVALID_IN          : in   std_logic; 
    -- System Interface
    USER_CLK                : in    std_logic;      
    SYSTEM_RESET            : in    std_logic
); 
end component;

component gtwizard_0_GT_FRAME_CHECK 
generic
(
    RX_DATA_WIDTH            : integer := 64;
    RXCTRL_WIDTH             : integer := 2; 
    WORDS_IN_BRAM            : integer := 256;
    CHANBOND_SEQ_LEN         : integer := 1;
    START_OF_PACKET_CHAR     : std_logic_vector(63 downto 0) := x"00000000000000fb"
);
port
(
    -- User Interface
    RX_DATA_IN               : in  std_logic_vector((RX_DATA_WIDTH-1) downto 0);
    RXENMCOMMADET_OUT        : out std_logic;
    RXENPCOMMADET_OUT        : out std_logic;
    RXDATAVALID_IN           : in  std_logic;

    -- Error Monitoring
    ERROR_COUNT_OUT          : out std_logic_vector(7 downto 0);

    -- Track Data
    TRACK_DATA_OUT           : out std_logic;

 

    -- System Interface
    USER_CLK                 : in std_logic;       
    SYSTEM_RESET             : in std_logic
);
end component;

component vio_0 
port (
    clk : in std_logic;
    probe_in0 : in std_logic_vector(0 downto 0);
    probe_out0 : out std_logic_vector(0 downto 0)
);
end component;

component ila_0 
port (
    clk : in std_logic;
    probe0 : in std_logic_vector(79 downto 0);
    probe1: in std_logic_vector(7 downto 0);
    probe2: in std_logic_vector(0 downto 0);
    probe3: in std_logic_vector(1 downto 0);
    probe4: in std_logic_vector(7 downto 0);
    probe5: in std_logic_vector(0 downto 0);
    probe6: in std_logic_vector(0 downto 0)
); 
end component;

component ila_1 
port (
    clk : in std_logic;
    probe0: in std_logic_vector(0 downto 0);
    probe1: in std_logic_vector(0 downto 0)
); 
end component;


--***********************************Parameter Declarations********************

    constant DLY : time := 1 ns;

--************************** Register Declarations ****************************
    attribute ASYNC_REG                        : string;
    signal   gt_txfsmresetdone_i             : std_logic;
    signal   gt_rxfsmresetdone_i             : std_logic;
    signal   gt_txfsmresetdone_r             : std_logic;
    signal   gt_txfsmresetdone_r2            : std_logic;
    attribute ASYNC_REG of gt_txfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt_txfsmresetdone_r2     : signal is "TRUE";
    signal   gt0_txfsmresetdone_i            : std_logic;
    signal   gt0_rxfsmresetdone_i            : std_logic;
    signal   gt0_txfsmresetdone_r            : std_logic;
    signal   gt0_txfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt0_txfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt0_txfsmresetdone_r2     : signal is "TRUE";
    signal   gt0_rxfsmresetdone_r            : std_logic;
    signal   gt0_rxfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt0_rxfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt0_rxfsmresetdone_r2     : signal is "TRUE";
    signal   gt0_rxresetdone_r               : std_logic;
    signal   gt0_rxresetdone_r2              : std_logic;
    signal   gt0_rxresetdone_r3              : std_logic;
    attribute ASYNC_REG of gt0_rxresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt0_rxresetdone_r2     : signal is "TRUE";
    attribute ASYNC_REG of gt0_rxresetdone_r3     : signal is "TRUE";

--***************************** Register Declarations *****************************
    signal   gt0_txseq_counter_r      :   unsigned(8 downto 0);
    signal   gt0_txheader_r           :   std_logic_vector(1 downto 0);
    signal   gt0_extend_reset_r       :   std_logic_vector(3 downto 0);
    signal   gt0_pause_data_valid_r   :   std_logic;
    
    signal   gt1_txfsmresetdone_i            : std_logic;
    signal   gt1_rxfsmresetdone_i            : std_logic;
    signal   gt1_txfsmresetdone_r            : std_logic;
    signal   gt1_txfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt1_txfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt1_txfsmresetdone_r2     : signal is "TRUE";
    signal   gt1_rxfsmresetdone_r            : std_logic;
    signal   gt1_rxfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt1_rxfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt1_rxfsmresetdone_r2     : signal is "TRUE";
    signal   gt1_rxresetdone_r               : std_logic;
    signal   gt1_rxresetdone_r2              : std_logic;
    signal   gt1_rxresetdone_r3              : std_logic;
    attribute ASYNC_REG of gt1_rxresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt1_rxresetdone_r2     : signal is "TRUE";
    attribute ASYNC_REG of gt1_rxresetdone_r3     : signal is "TRUE";

--***************************** Register Declarations *****************************
    signal   gt1_txseq_counter_r      :   unsigned(8 downto 0);
    signal   gt1_txheader_r           :   std_logic_vector(1 downto 0);
    signal   gt1_extend_reset_r       :   std_logic_vector(3 downto 0);
    signal   gt1_pause_data_valid_r   :   std_logic;
    
    signal   gt2_txfsmresetdone_i            : std_logic;
    signal   gt2_rxfsmresetdone_i            : std_logic;
    signal   gt2_txfsmresetdone_r            : std_logic;
    signal   gt2_txfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt2_txfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt2_txfsmresetdone_r2     : signal is "TRUE";
    signal   gt2_rxfsmresetdone_r            : std_logic;
    signal   gt2_rxfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt2_rxfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt2_rxfsmresetdone_r2     : signal is "TRUE";
    signal   gt2_rxresetdone_r               : std_logic;
    signal   gt2_rxresetdone_r2              : std_logic;
    signal   gt2_rxresetdone_r3              : std_logic;
    attribute ASYNC_REG of gt2_rxresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt2_rxresetdone_r2     : signal is "TRUE";
    attribute ASYNC_REG of gt2_rxresetdone_r3     : signal is "TRUE";

--***************************** Register Declarations *****************************
    signal   gt2_txseq_counter_r      :   unsigned(8 downto 0);
    signal   gt2_txheader_r           :   std_logic_vector(1 downto 0);
    signal   gt2_extend_reset_r       :   std_logic_vector(3 downto 0);
    signal   gt2_pause_data_valid_r   :   std_logic;
    
    signal   gt3_txfsmresetdone_i            : std_logic;
    signal   gt3_rxfsmresetdone_i            : std_logic;
    signal   gt3_txfsmresetdone_r            : std_logic;
    signal   gt3_txfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt3_txfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt3_txfsmresetdone_r2     : signal is "TRUE";
    signal   gt3_rxfsmresetdone_r            : std_logic;
    signal   gt3_rxfsmresetdone_r2           : std_logic;
    attribute ASYNC_REG of gt3_rxfsmresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt3_rxfsmresetdone_r2     : signal is "TRUE";
    signal   gt3_rxresetdone_r               : std_logic;
    signal   gt3_rxresetdone_r2              : std_logic;
    signal   gt3_rxresetdone_r3              : std_logic;
    attribute ASYNC_REG of gt3_rxresetdone_r     : signal is "TRUE";
    attribute ASYNC_REG of gt3_rxresetdone_r2     : signal is "TRUE";
    attribute ASYNC_REG of gt3_rxresetdone_r3     : signal is "TRUE";

--***************************** Register Declarations *****************************
    signal   gt3_txseq_counter_r      :   unsigned(8 downto 0);
    signal   gt3_txheader_r           :   std_logic_vector(1 downto 0);
    signal   gt3_extend_reset_r       :   std_logic_vector(3 downto 0);
    signal   gt3_pause_data_valid_r   :   std_logic;


--**************************** Wire Declarations ******************************
    -------------------------- GT Wrapper Wires ------------------------------
    --________________________________________________________________________
    --________________________________________________________________________
    --GT0  (X1Y12)

    ---------------------------- Channel - DRP Ports  --------------------------
    signal  gt0_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt0_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpen_i                     : std_logic;
    signal  gt0_drprdy_i                    : std_logic;
    signal  gt0_drpwe_i                     : std_logic;
    ------------------------------- Loopback Ports -----------------------------
    signal  gt0_loopback_i                  : std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    signal  gt0_rxrate_i                    : std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    signal  gt0_eyescanreset_i              : std_logic;
    signal  gt0_rxuserrdy_i                 : std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    signal  gt0_eyescandataerror_i          : std_logic;
    signal  gt0_eyescantrigger_i            : std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    signal  gt0_rxcdrhold_i                 : std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    signal  gt0_dmonitorout_i               : std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    signal  gt0_rxdata_i                    : std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    signal  gt0_rxprbserr_i                 : std_logic;
    signal  gt0_rxprbssel_i                 : std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    signal  gt0_rxprbscntreset_i            : std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    signal  gt0_gthrxn_i                    : std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    signal  gt0_rxbufreset_i                : std_logic;
    signal  gt0_rxbufstatus_i               : std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    signal  gt0_rxdfelpmreset_i             : std_logic;
    signal  gt0_rxmonitorout_i              : std_logic_vector(6 downto 0);
    signal  gt0_rxmonitorsel_i              : std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    signal  gt0_rxratedone_i                : std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    signal  gt0_rxoutclk_i                  : std_logic;
    signal  gt0_rxoutclkfabric_i            : std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    signal  gt0_rxdatavalid_i               : std_logic;
    signal  gt0_rxheader_i                  : std_logic_vector(1 downto 0);
    signal  gt0_rxheadervalid_i             : std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    signal  gt0_rxgearboxslip_i             : std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    signal  gt0_gtrxreset_i                 : std_logic;
    signal  gt0_rxpcsreset_i                : std_logic;
    signal  gt0_rxpmareset_i                : std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    signal  gt0_rxlpmen_i                   : std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    signal  gt0_rxpolarity_i                : std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    signal  gt0_gthrxp_i                    : std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    signal  gt0_rxresetdone_i               : std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    signal  gt0_txpostcursor_i              : std_logic_vector(4 downto 0);
    signal  gt0_txprecursor_i               : std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    signal  gt0_gttxreset_i                 : std_logic;
    signal  gt0_txuserrdy_i                 : std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    signal  gt0_txheader_i                  : std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    signal  gt0_txprbsforceerr_i            : std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    signal  gt0_txbufstatus_i               : std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    signal  gt0_txdiffctrl_i                : std_logic_vector(3 downto 0);
    signal  gt0_txinhibit_i                 : std_logic;
    signal  gt0_txmaincursor_i              : std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    signal  gt0_txdata_i                    : std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    signal  gt0_gthtxn_i                    : std_logic;
    signal  gt0_gthtxp_i                    : std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    signal  gt0_txoutclk_i                  : std_logic;
    signal  gt0_txoutclkfabric_i            : std_logic;
    signal  gt0_txoutclkpcs_i               : std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    signal  gt0_txsequence_i                : std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    signal  gt0_txpcsreset_i                : std_logic;
    signal  gt0_txpmareset_i                : std_logic;
    signal  gt0_txresetdone_i               : std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    signal  gt0_txpolarity_i                : std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    signal  gt0_txprbssel_i                 : std_logic_vector(2 downto 0);


    --________________________________________________________________________
    --________________________________________________________________________
    --GT1  (X1Y13)

    ---------------------------- Channel - DRP Ports  --------------------------
    signal  gt1_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt1_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt1_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt1_drpen_i                     : std_logic;
    signal  gt1_drprdy_i                    : std_logic;
    signal  gt1_drpwe_i                     : std_logic;
    ------------------------------- Loopback Ports -----------------------------
    signal  gt1_loopback_i                  : std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    signal  gt1_rxrate_i                    : std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    signal  gt1_eyescanreset_i              : std_logic;
    signal  gt1_rxuserrdy_i                 : std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    signal  gt1_eyescandataerror_i          : std_logic;
    signal  gt1_eyescantrigger_i            : std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    signal  gt1_rxcdrhold_i                 : std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    signal  gt1_dmonitorout_i               : std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    signal  gt1_rxdata_i                    : std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    signal  gt1_rxprbserr_i                 : std_logic;
    signal  gt1_rxprbssel_i                 : std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    signal  gt1_rxprbscntreset_i            : std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    signal  gt1_gthrxn_i                    : std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    signal  gt1_rxbufreset_i                : std_logic;
    signal  gt1_rxbufstatus_i               : std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    signal  gt1_rxdfelpmreset_i             : std_logic;
    signal  gt1_rxmonitorout_i              : std_logic_vector(6 downto 0);
    signal  gt1_rxmonitorsel_i              : std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    signal  gt1_rxratedone_i                : std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    signal  gt1_rxoutclk_i                  : std_logic;
    signal  gt1_rxoutclkfabric_i            : std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    signal  gt1_rxdatavalid_i               : std_logic;
    signal  gt1_rxheader_i                  : std_logic_vector(1 downto 0);
    signal  gt1_rxheadervalid_i             : std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    signal  gt1_rxgearboxslip_i             : std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    signal  gt1_gtrxreset_i                 : std_logic;
    signal  gt1_rxpcsreset_i                : std_logic;
    signal  gt1_rxpmareset_i                : std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    signal  gt1_rxlpmen_i                   : std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    signal  gt1_rxpolarity_i                : std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    signal  gt1_gthrxp_i                    : std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    signal  gt1_rxresetdone_i               : std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    signal  gt1_txpostcursor_i              : std_logic_vector(4 downto 0);
    signal  gt1_txprecursor_i               : std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    signal  gt1_gttxreset_i                 : std_logic;
    signal  gt1_txuserrdy_i                 : std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    signal  gt1_txheader_i                  : std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    signal  gt1_txprbsforceerr_i            : std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    signal  gt1_txbufstatus_i               : std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    signal  gt1_txdiffctrl_i                : std_logic_vector(3 downto 0);
    signal  gt1_txinhibit_i                 : std_logic;
    signal  gt1_txmaincursor_i              : std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    signal  gt1_txdata_i                    : std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    signal  gt1_gthtxn_i                    : std_logic;
    signal  gt1_gthtxp_i                    : std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    signal  gt1_txoutclk_i                  : std_logic;
    signal  gt1_txoutclkfabric_i            : std_logic;
    signal  gt1_txoutclkpcs_i               : std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    signal  gt1_txsequence_i                : std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    signal  gt1_txpcsreset_i                : std_logic;
    signal  gt1_txpmareset_i                : std_logic;
    signal  gt1_txresetdone_i               : std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    signal  gt1_txpolarity_i                : std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    signal  gt1_txprbssel_i                 : std_logic_vector(2 downto 0);


    --________________________________________________________________________
    --________________________________________________________________________
    --GT2  (X1Y14)

    ---------------------------- Channel - DRP Ports  --------------------------
    signal  gt2_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt2_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt2_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt2_drpen_i                     : std_logic;
    signal  gt2_drprdy_i                    : std_logic;
    signal  gt2_drpwe_i                     : std_logic;
    ------------------------------- Loopback Ports -----------------------------
    signal  gt2_loopback_i                  : std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    signal  gt2_rxrate_i                    : std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    signal  gt2_eyescanreset_i              : std_logic;
    signal  gt2_rxuserrdy_i                 : std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    signal  gt2_eyescandataerror_i          : std_logic;
    signal  gt2_eyescantrigger_i            : std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    signal  gt2_rxcdrhold_i                 : std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    signal  gt2_dmonitorout_i               : std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    signal  gt2_rxdata_i                    : std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    signal  gt2_rxprbserr_i                 : std_logic;
    signal  gt2_rxprbssel_i                 : std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    signal  gt2_rxprbscntreset_i            : std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    signal  gt2_gthrxn_i                    : std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    signal  gt2_rxbufreset_i                : std_logic;
    signal  gt2_rxbufstatus_i               : std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    signal  gt2_rxdfelpmreset_i             : std_logic;
    signal  gt2_rxmonitorout_i              : std_logic_vector(6 downto 0);
    signal  gt2_rxmonitorsel_i              : std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    signal  gt2_rxratedone_i                : std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    signal  gt2_rxoutclk_i                  : std_logic;
    signal  gt2_rxoutclkfabric_i            : std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    signal  gt2_rxdatavalid_i               : std_logic;
    signal  gt2_rxheader_i                  : std_logic_vector(1 downto 0);
    signal  gt2_rxheadervalid_i             : std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    signal  gt2_rxgearboxslip_i             : std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    signal  gt2_gtrxreset_i                 : std_logic;
    signal  gt2_rxpcsreset_i                : std_logic;
    signal  gt2_rxpmareset_i                : std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    signal  gt2_rxlpmen_i                   : std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    signal  gt2_rxpolarity_i                : std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    signal  gt2_gthrxp_i                    : std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    signal  gt2_rxresetdone_i               : std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    signal  gt2_txpostcursor_i              : std_logic_vector(4 downto 0);
    signal  gt2_txprecursor_i               : std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    signal  gt2_gttxreset_i                 : std_logic;
    signal  gt2_txuserrdy_i                 : std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    signal  gt2_txheader_i                  : std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    signal  gt2_txprbsforceerr_i            : std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    signal  gt2_txbufstatus_i               : std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    signal  gt2_txdiffctrl_i                : std_logic_vector(3 downto 0);
    signal  gt2_txinhibit_i                 : std_logic;
    signal  gt2_txmaincursor_i              : std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    signal  gt2_txdata_i                    : std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    signal  gt2_gthtxn_i                    : std_logic;
    signal  gt2_gthtxp_i                    : std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    signal  gt2_txoutclk_i                  : std_logic;
    signal  gt2_txoutclkfabric_i            : std_logic;
    signal  gt2_txoutclkpcs_i               : std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    signal  gt2_txsequence_i                : std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    signal  gt2_txpcsreset_i                : std_logic;
    signal  gt2_txpmareset_i                : std_logic;
    signal  gt2_txresetdone_i               : std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    signal  gt2_txpolarity_i                : std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    signal  gt2_txprbssel_i                 : std_logic_vector(2 downto 0);


    --________________________________________________________________________
    --________________________________________________________________________
    --GT3  (X1Y15)

    ---------------------------- Channel - DRP Ports  --------------------------
    signal  gt3_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt3_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt3_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt3_drpen_i                     : std_logic;
    signal  gt3_drprdy_i                    : std_logic;
    signal  gt3_drpwe_i                     : std_logic;
    ------------------------------- Loopback Ports -----------------------------
    signal  gt3_loopback_i                  : std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    signal  gt3_rxrate_i                    : std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    signal  gt3_eyescanreset_i              : std_logic;
    signal  gt3_rxuserrdy_i                 : std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    signal  gt3_eyescandataerror_i          : std_logic;
    signal  gt3_eyescantrigger_i            : std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    signal  gt3_rxcdrhold_i                 : std_logic;
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    signal  gt3_dmonitorout_i               : std_logic_vector(14 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    signal  gt3_rxdata_i                    : std_logic_vector(63 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    signal  gt3_rxprbserr_i                 : std_logic;
    signal  gt3_rxprbssel_i                 : std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    signal  gt3_rxprbscntreset_i            : std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    signal  gt3_gthrxn_i                    : std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    signal  gt3_rxbufreset_i                : std_logic;
    signal  gt3_rxbufstatus_i               : std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    signal  gt3_rxdfelpmreset_i             : std_logic;
    signal  gt3_rxmonitorout_i              : std_logic_vector(6 downto 0);
    signal  gt3_rxmonitorsel_i              : std_logic_vector(1 downto 0);
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    signal  gt3_rxratedone_i                : std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    signal  gt3_rxoutclk_i                  : std_logic;
    signal  gt3_rxoutclkfabric_i            : std_logic;
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
    signal  gt3_rxdatavalid_i               : std_logic;
    signal  gt3_rxheader_i                  : std_logic_vector(1 downto 0);
    signal  gt3_rxheadervalid_i             : std_logic;
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    signal  gt3_rxgearboxslip_i             : std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    signal  gt3_gtrxreset_i                 : std_logic;
    signal  gt3_rxpcsreset_i                : std_logic;
    signal  gt3_rxpmareset_i                : std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    signal  gt3_rxlpmen_i                   : std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    signal  gt3_rxpolarity_i                : std_logic;
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    signal  gt3_gthrxp_i                    : std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    signal  gt3_rxresetdone_i               : std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    signal  gt3_txpostcursor_i              : std_logic_vector(4 downto 0);
    signal  gt3_txprecursor_i               : std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    signal  gt3_gttxreset_i                 : std_logic;
    signal  gt3_txuserrdy_i                 : std_logic;
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    signal  gt3_txheader_i                  : std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    signal  gt3_txprbsforceerr_i            : std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    signal  gt3_txbufstatus_i               : std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    signal  gt3_txdiffctrl_i                : std_logic_vector(3 downto 0);
    signal  gt3_txinhibit_i                 : std_logic;
    signal  gt3_txmaincursor_i              : std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    signal  gt3_txdata_i                    : std_logic_vector(63 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    signal  gt3_gthtxn_i                    : std_logic;
    signal  gt3_gthtxp_i                    : std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    signal  gt3_txoutclk_i                  : std_logic;
    signal  gt3_txoutclkfabric_i            : std_logic;
    signal  gt3_txoutclkpcs_i               : std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    signal  gt3_txsequence_i                : std_logic_vector(6 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    signal  gt3_txpcsreset_i                : std_logic;
    signal  gt3_txpmareset_i                : std_logic;
    signal  gt3_txresetdone_i               : std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    signal  gt3_txpolarity_i                : std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    signal  gt3_txprbssel_i                 : std_logic_vector(2 downto 0);



    --____________________________COMMON PORTS________________________________
    ---------------------- Common Block  - Ref Clock Ports ---------------------
    signal  gt0_gtrefclk1_common_i          : std_logic;
    ------------------------- Common Block - QPLL Ports ------------------------
    signal  gt0_qplllock_i                  : std_logic;
    signal  gt0_qpllrefclklost_i            : std_logic;
    signal  gt0_qpllreset_i                 : std_logic;



    ------------------------------- Global Signals -----------------------------
    signal  gt0_tx_system_reset_c           : std_logic;
    signal  gt0_rx_system_reset_c           : std_logic;
    signal  gt1_tx_system_reset_c           : std_logic;
    signal  gt1_rx_system_reset_c           : std_logic;
    signal  gt2_tx_system_reset_c           : std_logic;
    signal  gt2_rx_system_reset_c           : std_logic;
    signal  gt3_tx_system_reset_c           : std_logic;
    signal  gt3_rx_system_reset_c           : std_logic;
    signal  tied_to_ground_i                : std_logic;
    signal  tied_to_ground_vec_i            : std_logic_vector(63 downto 0);
    signal  tied_to_vcc_i                   : std_logic;
    signal  tied_to_vcc_vec_i               : std_logic_vector(7 downto 0);
    signal  drpclk_in_i                     : std_logic;
    signal  DRPCLK_IN                       : std_logic;
    signal   gt0_rx_reset_i           :   std_logic;
    signal   gt0_rx_reset_i1          :   std_logic;
    signal   gt0_rx_reset_i2          :   std_logic;
attribute ASYNC_REG of gt0_rx_reset_i1     : signal is "TRUE";
attribute ASYNC_REG of gt0_rx_reset_i2     : signal is "TRUE";
    signal   gt0_not_block_lock_i     :   std_logic;
    signal   gt0_scrambled_data_i     :   std_logic_vector(63 downto 0);
    signal   gt0_data_valid_i         :   std_logic;
    signal   gt0_data_valid_out_i     :   std_logic;
    signal   gt0_tx_reset_i           :   std_logic;
    signal   gt0_reset_r              :   std_logic;
    signal   gt1_rx_reset_i           :   std_logic;
    signal   gt1_rx_reset_i1          :   std_logic;
    signal   gt1_rx_reset_i2          :   std_logic;
attribute ASYNC_REG of gt1_rx_reset_i1     : signal is "TRUE";
attribute ASYNC_REG of gt1_rx_reset_i2     : signal is "TRUE";
    signal   gt1_not_block_lock_i     :   std_logic;
    signal   gt1_scrambled_data_i     :   std_logic_vector(63 downto 0);
    signal   gt1_data_valid_i         :   std_logic;
    signal   gt1_data_valid_out_i     :   std_logic;
    signal   gt1_tx_reset_i           :   std_logic;
    signal   gt1_reset_r              :   std_logic;
    signal   gt2_rx_reset_i           :   std_logic;
    signal   gt2_rx_reset_i1          :   std_logic;
    signal   gt2_rx_reset_i2          :   std_logic;
attribute ASYNC_REG of gt2_rx_reset_i1     : signal is "TRUE";
attribute ASYNC_REG of gt2_rx_reset_i2     : signal is "TRUE";
    signal   gt2_not_block_lock_i     :   std_logic;
    signal   gt2_scrambled_data_i     :   std_logic_vector(63 downto 0);
    signal   gt2_data_valid_i         :   std_logic;
    signal   gt2_data_valid_out_i     :   std_logic;
    signal   gt2_tx_reset_i           :   std_logic;
    signal   gt2_reset_r              :   std_logic;
    signal   gt3_rx_reset_i           :   std_logic;
    signal   gt3_rx_reset_i1          :   std_logic;
    signal   gt3_rx_reset_i2          :   std_logic;
attribute ASYNC_REG of gt3_rx_reset_i1     : signal is "TRUE";
attribute ASYNC_REG of gt3_rx_reset_i2     : signal is "TRUE";
    signal   gt3_not_block_lock_i     :   std_logic;
    signal   gt3_scrambled_data_i     :   std_logic_vector(63 downto 0);
    signal   gt3_data_valid_i         :   std_logic;
    signal   gt3_data_valid_out_i     :   std_logic;
    signal   gt3_tx_reset_i           :   std_logic;
    signal   gt3_reset_r              :   std_logic;
    signal  GTTXRESET_IN                    : std_logic;
    signal  GTRXRESET_IN                    : std_logic;
    signal  QPLLRESET_IN                    : std_logic;

    attribute keep: string;
   ------------------------------- User Clocks ---------------------------------
    signal    gt0_txusrclk_i                  : std_logic; 
    signal    gt0_txusrclk2_i                 : std_logic; 
    signal    gt0_rxusrclk_i                  : std_logic; 
    signal    gt0_rxusrclk2_i                 : std_logic; 
    
    signal    gt1_txusrclk_i                  : std_logic; 
    signal    gt1_txusrclk2_i                 : std_logic; 
    signal    gt1_rxusrclk_i                  : std_logic; 
    signal    gt1_rxusrclk2_i                 : std_logic; 
    
    signal    gt2_txusrclk_i                  : std_logic; 
    signal    gt2_txusrclk2_i                 : std_logic; 
    signal    gt2_rxusrclk_i                  : std_logic; 
    signal    gt2_rxusrclk2_i                 : std_logic; 
    
    signal    gt3_txusrclk_i                  : std_logic; 
    signal    gt3_txusrclk2_i                 : std_logic; 
    signal    gt3_rxusrclk_i                  : std_logic; 
    signal    gt3_rxusrclk2_i                 : std_logic; 
    
    
    signal    gt0_txmmcm_lock_i               : std_logic;
    signal    gt0_txmmcm_reset_i              : std_logic;
    signal    gt0_rxmmcm_lock_i               : std_logic; 
    signal    gt0_rxmmcm_reset_i              : std_logic;
    signal    gt1_txmmcm_lock_i               : std_logic;
    signal    gt1_txmmcm_reset_i              : std_logic;
    signal    gt1_rxmmcm_lock_i               : std_logic; 
    signal    gt1_rxmmcm_reset_i              : std_logic;
    signal    gt2_txmmcm_lock_i               : std_logic;
    signal    gt2_txmmcm_reset_i              : std_logic;
    signal    gt2_rxmmcm_lock_i               : std_logic; 
    signal    gt2_rxmmcm_reset_i              : std_logic;
    signal    gt3_txmmcm_lock_i               : std_logic;
    signal    gt3_txmmcm_reset_i              : std_logic;
    signal    gt3_rxmmcm_lock_i               : std_logic; 
    signal    gt3_rxmmcm_reset_i              : std_logic;
    ----------------------------- Reference Clocks ----------------------------
    signal    q3_clk1_refclk_i                : std_logic;


    ----------------------- Frame check/gen Module Signals --------------------

    signal    gt0_matchn_i                    : std_logic;
    signal    gt0_txctrl_float_i              : std_logic_vector(6 downto 0);
    signal    gt0_txctrl_i                    : std_logic;
    signal    gt0_txdatavalid_i               : std_logic;
    signal    gt0_block_lock_i                : std_logic;
    signal    gt0_txcharisk_float_i           : std_logic_vector(5 downto 0);
    signal    gt0_txdata_float16_i            : std_logic_vector(15 downto 0);
    signal    gt0_txheader_float_i            : std_logic;
    signal    gt0_track_data_i                : std_logic;
    signal    gt0_block_sync_i                : std_logic;
    signal    gt0_error_count_i               : std_logic_vector(7 downto 0);
    signal    gt0_frame_check_reset_i         : std_logic;
    signal    gt0_inc_in_i                    : std_logic;
    signal    gt0_inc_out_i                   : std_logic;
    signal    gt0_unscrambled_data_i          : std_logic_vector(63 downto 0);

    signal    gt1_matchn_i                    : std_logic;
    signal    gt1_txctrl_float_i              : std_logic_vector(6 downto 0);
    signal    gt1_txctrl_i                    : std_logic;
    signal    gt1_txdatavalid_i               : std_logic;
    signal    gt1_block_lock_i                : std_logic;
    signal    gt1_txcharisk_float_i           : std_logic_vector(5 downto 0);
    signal    gt1_txdata_float16_i            : std_logic_vector(15 downto 0);
    signal    gt1_txheader_float_i            : std_logic;
    signal    gt1_track_data_i                : std_logic;
    signal    gt1_block_sync_i                : std_logic;
    signal    gt1_error_count_i               : std_logic_vector(7 downto 0);
    signal    gt1_frame_check_reset_i         : std_logic;
    signal    gt1_inc_in_i                    : std_logic;
    signal    gt1_inc_out_i                   : std_logic;
    signal    gt1_unscrambled_data_i          : std_logic_vector(63 downto 0);

    signal    gt2_matchn_i                    : std_logic;
    signal    gt2_txctrl_float_i              : std_logic_vector(6 downto 0);
    signal    gt2_txctrl_i                    : std_logic;
    signal    gt2_txdatavalid_i               : std_logic;
    signal    gt2_block_lock_i                : std_logic;
    signal    gt2_txcharisk_float_i           : std_logic_vector(5 downto 0);
    signal    gt2_txdata_float16_i            : std_logic_vector(15 downto 0);
    signal    gt2_txheader_float_i            : std_logic;
    signal    gt2_track_data_i                : std_logic;
    signal    gt2_block_sync_i                : std_logic;
    signal    gt2_error_count_i               : std_logic_vector(7 downto 0);
    signal    gt2_frame_check_reset_i         : std_logic;
    signal    gt2_inc_in_i                    : std_logic;
    signal    gt2_inc_out_i                   : std_logic;
    signal    gt2_unscrambled_data_i          : std_logic_vector(63 downto 0);

    signal    gt3_matchn_i                    : std_logic;
    signal    gt3_txctrl_float_i              : std_logic_vector(6 downto 0);
    signal    gt3_txctrl_i                    : std_logic;
    signal    gt3_txdatavalid_i               : std_logic;
    signal    gt3_block_lock_i                : std_logic;
    signal    gt3_txcharisk_float_i           : std_logic_vector(5 downto 0);
    signal    gt3_txdata_float16_i            : std_logic_vector(15 downto 0);
    signal    gt3_txheader_float_i            : std_logic;
    signal    gt3_track_data_i                : std_logic;
    signal    gt3_block_sync_i                : std_logic;
    signal    gt3_error_count_i               : std_logic_vector(7 downto 0);
    signal    gt3_frame_check_reset_i         : std_logic;
    signal    gt3_inc_in_i                    : std_logic;
    signal    gt3_inc_out_i                   : std_logic;
    signal    gt3_unscrambled_data_i          : std_logic_vector(63 downto 0);

    signal    reset_on_data_error_i           : std_logic;
    signal    track_data_out_i                : std_logic;
    signal    track_data_out_ila_i : std_logic_vector(0 downto 0);

    ----------------------- Chipscope Signals ---------------------------------

    signal  tx_data_vio_control_i           : std_logic_vector(35 downto 0);
    signal  rx_data_vio_control_i           : std_logic_vector(35 downto 0);
    signal  shared_vio_control_i            : std_logic_vector(35 downto 0);
    signal  ila_control_i                   : std_logic_vector(35 downto 0);
    signal  channel_drp_vio_control_i       : std_logic_vector(35 downto 0);
    signal  common_drp_vio_control_i        : std_logic_vector(35 downto 0);
    signal  tx_data_vio_async_in_i          : std_logic_vector(31 downto 0);
    signal  tx_data_vio_sync_in_i           : std_logic_vector(31 downto 0);
    signal  tx_data_vio_async_out_i         : std_logic_vector(31 downto 0);
    signal  tx_data_vio_sync_out_i          : std_logic_vector(31 downto 0);
    signal  rx_data_vio_async_in_i          : std_logic_vector(31 downto 0);
    signal  rx_data_vio_sync_in_i           : std_logic_vector(31 downto 0);
    signal  rx_data_vio_async_out_i         : std_logic_vector(31 downto 0);
    signal  rx_data_vio_sync_out_i          : std_logic_vector(31 downto 0);
    signal  shared_vio_in_i                 : std_logic_vector(31 downto 0);
    signal  shared_vio_out_i                : std_logic_vector(31 downto 0);
    signal  ila_in_i                        : std_logic_vector(163 downto 0);
    signal  channel_drp_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  common_drp_vio_async_in_i       : std_logic_vector(31 downto 0);
    signal  common_drp_vio_sync_in_i        : std_logic_vector(31 downto 0);
    signal  common_drp_vio_async_out_i      : std_logic_vector(31 downto 0);
    signal  common_drp_vio_sync_out_i       : std_logic_vector(31 downto 0);

    signal  gt0_tx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt0_ila_in_i                    : std_logic_vector(163 downto 0);
    signal  gt0_channel_drp_vio_async_in_i  : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_sync_in_i   : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_async_out_i : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_sync_out_i  : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_async_in_i   : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_sync_in_i    : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_async_out_i  : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_sync_out_i   : std_logic_vector(31 downto 0);

    signal  gt1_tx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt1_tx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt1_tx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt1_tx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt1_rx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt1_rx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt1_rx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt1_rx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt1_ila_in_i                    : std_logic_vector(163 downto 0);
    signal  gt1_channel_drp_vio_async_in_i  : std_logic_vector(31 downto 0);
    signal  gt1_channel_drp_vio_sync_in_i   : std_logic_vector(31 downto 0);
    signal  gt1_channel_drp_vio_async_out_i : std_logic_vector(31 downto 0);
    signal  gt1_channel_drp_vio_sync_out_i  : std_logic_vector(31 downto 0);
    signal  gt1_common_drp_vio_async_in_i   : std_logic_vector(31 downto 0);
    signal  gt1_common_drp_vio_sync_in_i    : std_logic_vector(31 downto 0);
    signal  gt1_common_drp_vio_async_out_i  : std_logic_vector(31 downto 0);
    signal  gt1_common_drp_vio_sync_out_i   : std_logic_vector(31 downto 0);

    signal  gt2_tx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt2_tx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt2_tx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt2_tx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt2_rx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt2_rx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt2_rx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt2_rx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt2_ila_in_i                    : std_logic_vector(163 downto 0);
    signal  gt2_channel_drp_vio_async_in_i  : std_logic_vector(31 downto 0);
    signal  gt2_channel_drp_vio_sync_in_i   : std_logic_vector(31 downto 0);
    signal  gt2_channel_drp_vio_async_out_i : std_logic_vector(31 downto 0);
    signal  gt2_channel_drp_vio_sync_out_i  : std_logic_vector(31 downto 0);
    signal  gt2_common_drp_vio_async_in_i   : std_logic_vector(31 downto 0);
    signal  gt2_common_drp_vio_sync_in_i    : std_logic_vector(31 downto 0);
    signal  gt2_common_drp_vio_async_out_i  : std_logic_vector(31 downto 0);
    signal  gt2_common_drp_vio_sync_out_i   : std_logic_vector(31 downto 0);

    signal  gt3_tx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt3_tx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt3_tx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt3_tx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt3_rx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt3_rx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt3_rx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt3_rx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt3_ila_in_i                    : std_logic_vector(163 downto 0);
    signal  gt3_channel_drp_vio_async_in_i  : std_logic_vector(31 downto 0);
    signal  gt3_channel_drp_vio_sync_in_i   : std_logic_vector(31 downto 0);
    signal  gt3_channel_drp_vio_async_out_i : std_logic_vector(31 downto 0);
    signal  gt3_channel_drp_vio_sync_out_i  : std_logic_vector(31 downto 0);
    signal  gt3_common_drp_vio_async_in_i   : std_logic_vector(31 downto 0);
    signal  gt3_common_drp_vio_sync_in_i    : std_logic_vector(31 downto 0);
    signal  gt3_common_drp_vio_async_out_i  : std_logic_vector(31 downto 0);
    signal  gt3_common_drp_vio_sync_out_i   : std_logic_vector(31 downto 0);


    signal    gttxreset_i                     : std_logic;
    signal    gtrxreset_i                     : std_logic;
    signal    mux_sel_i                       : std_logic_vector(1 downto 0);

    signal    user_tx_reset_i                 : std_logic;
    signal    user_rx_reset_i                 : std_logic;
    signal    tx_vio_clk_i                    : std_logic;
    signal    tx_vio_clk_mux_out_i            : std_logic;    
    signal    rx_vio_ila_clk_i                : std_logic;
    signal    rx_vio_ila_clk_mux_out_i        : std_logic;    

    signal    qpllreset_i                     : std_logic;


    signal zero_vector_rx_80 : std_logic_vector ((80 -64) -1 downto 0) := (others => '0');
    signal zero_vector_rx_8 : std_logic_vector ((8 -2) -1 downto 0) := (others => '0');
    signal gt0_rxdata_ila : std_logic_vector (79 downto 0);
    signal gt0_rxdatavalid_ila : std_logic_vector (1 downto 0);
    signal gt0_rxcharisk_ila : std_logic_vector (7 downto 0);
    signal gt0_txmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt0_rxmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt0_rxresetdone_ila : std_logic_vector (0 downto 0);
    signal gt0_txresetdone_ila : std_logic_vector (0 downto 0);
    signal gt1_rxdata_ila : std_logic_vector (79 downto 0);
    signal gt1_rxdatavalid_ila : std_logic_vector (1 downto 0);
    signal gt1_rxcharisk_ila : std_logic_vector (7 downto 0);
    signal gt1_txmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt1_rxmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt1_rxresetdone_ila : std_logic_vector (0 downto 0);
    signal gt1_txresetdone_ila : std_logic_vector (0 downto 0);
    signal gt2_rxdata_ila : std_logic_vector (79 downto 0);
    signal gt2_rxdatavalid_ila : std_logic_vector (1 downto 0);
    signal gt2_rxcharisk_ila : std_logic_vector (7 downto 0);
    signal gt2_txmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt2_rxmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt2_rxresetdone_ila : std_logic_vector (0 downto 0);
    signal gt2_txresetdone_ila : std_logic_vector (0 downto 0);
    signal gt3_rxdata_ila : std_logic_vector (79 downto 0);
    signal gt3_rxdatavalid_ila : std_logic_vector (1 downto 0);
    signal gt3_rxcharisk_ila : std_logic_vector (7 downto 0);
    signal gt3_txmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt3_rxmmcm_lock_ila : std_logic_vector (0 downto 0);
    signal gt3_rxresetdone_ila : std_logic_vector (0 downto 0);
    signal gt3_txresetdone_ila : std_logic_vector (0 downto 0);

    signal tied_to_ground_ila_i : std_logic_vector (0 downto 0);
    -- update with the actual reset name
    signal soft_reset_i  : std_logic;
    signal soft_reset_vio_i  : std_logic_vector(0 downto 0);
    signal gt0_rxfsmresetdone_s : std_logic_vector(0 downto 0);

    function and_reduce(arg: std_logic_vector) return std_logic is
    variable result: std_logic;
    begin
        result := '1';
        for i in arg'range loop
            result := result and arg(i);
        end loop;
        return result;
    end;

--------------------------------------------------------------------------------
--
--  HERE WE ADD OUR OWN CODE
--
--------------------------------------------------------------------------------

    -- FPGA ports.
    signal RXN_IN           : std_logic_vector(3 downto 0);
    signal RXP_IN           : std_logic_vector(3 downto 0);
    signal TXN_OUT          : std_logic_vector(3 downto 0);
    signal TXP_OUT          : std_logic_vector(3 downto 0);
    --signal LOS_LS           : std_logic_vector(3 downto 0);
    --signal MOD_DETECT_LS    : std_logic_vector(3 downto 0);
    --signal TX_FAULT_LS      : std_logic_vector(3 downto 0);
    signal TX_DISABLE_LS_B  : std_logic_vector(3 downto 0);

    signal LED       : std_logic_vector(7 downto 0);
    signal fan_out   : std_logic;
    signal c_btn     : std_logic;
    signal reset_btn     : std_logic;
    signal not_reset_btn : std_logic;
    signal startup_reset_done : std_logic;
    
    -- UART.
    component UART is
    generic (
        baud            : natural;
        clock_frequency : natural
    );
    port (  
        clk         : in  std_logic;
        reset       : in  std_logic;
        
        TX          : out std_logic;
        RX          : in  std_logic;
            
        TX_byte     : in  std_logic_vector(7 downto 0);
        RX_byte     : out std_logic_vector(7 downto 0);
        
        TX_start    : in  std_logic;
        TX_busy     : out std_logic;
        RX_complete : out std_logic        
    );
    end component;

    signal TX          : std_logic;
    signal RX          : std_logic;
    signal TX_byte     : std_logic_vector(7 downto 0);
    signal RX_byte     : std_logic_vector(7 downto 0);
    signal TX_start    : std_logic;
    signal TX_busy     : std_logic;
    signal RX_complete : std_logic;
    
    -- State machine for the UART.
    type TX_states is ( IDLE, BYTE_COUNTING, READ_ALL_A0h, READ_ALL_A2h,
                        READ_RTS, UART_BUSY, WAIT_FOR_UART_BUSY, WAIT_FOR_UART_NOT_BUSY,--READ_DIGITAL, 
                        READ_FRAME_CHECK, WAITING );
    signal TX_curr_state : TX_states := IDLE;
    signal TX_next_state : TX_states := IDLE;
    
    
    -- I2C for configuring the Si5324.
    component VC709_I2C_inits is
    port (  
        clk           : in std_logic;
        reset_in      : in std_logic;
        
        -- Signal to the MUX ICs reset pins.
        mux_reset     : out std_logic;
    
        -- Ports to signal if IDLE, start reading, signaling
        -- when a read is done and its output.        
        idle_state    : out std_logic;
        start         : in  std_logic;
        read_done     : out std_logic;
        read_data     : out std_logic_vector(7 downto 0);
    
        -- Specifies start and stop registers to read from.
        index_start   : in  std_logic_vector(7 downto 0);
        index_stop    : in  std_logic_vector(7 downto 0);
        
        -- Selecting which EEPROM to address:
        -- '0' = A0h.
        -- '1' = A2h.
        SFP_REG_sel   : in  std_logic;
        
        -- Select device to interface with:
        -- '0' = SFP reading.
        -- '1' = Si5324 writing.
        device_sel    : in  std_logic;
        
        -- The I/Os of the I2C.
        sda           : inout  std_logic;
        scl           : inout  std_logic
    );
    end component;

    signal I2C_idle_state  : std_logic;
    signal I2C_start       : std_logic;
    signal I2C_read_done   : std_logic;
    signal I2C_read_data   : std_logic_vector(7 downto 0);
    
    signal I2C_index_start : std_logic_vector(7 downto 0);
    signal I2C_index_stop  : std_logic_vector(7 downto 0);
    
    signal I2C_SFP_REG_sel : std_logic;
    signal I2C_device_sel  : std_logic;
    
    -- State machine for reseting and enabling the Si5324 ref clock.    
    type SI5324_STATES is (RESET_1, RESET_2, WRITE, FINISH, STOP);
    signal SI5324_STATE : SI5324_STATES; 



    component transceiver_module is
    generic(
        DATA_WIDTH : integer;
        N_WIDTH    : integer;
        K_WIDTH    : integer;
        BUF_WIDTH  : integer
    );
    port(
        -- CLOCKS.
        tx_clk          : in  std_logic;
        rx_clk          : in  std_logic;
        
        -- RESETS.
        reset_in        : in  std_logic;
        
        -- TX PORTS.
        TXVALID         : out std_logic;
        TXSEQ           : out std_logic_vector(6 downto 0);
        TXHEADER        : out std_logic_vector(1 downto 0);
        TXDATA          : out std_logic_vector((DATA_WIDTH-1) downto 0);
        
        -- RX PORTS.
        RXVALID         : in  std_logic;
        RXHEADER        : in  std_logic_vector(1 downto 0);
        RXHEADERVALID   : in  std_logic;
        RXDATA          : in  std_logic_vector((DATA_WIDTH-1) downto 0);
        RXGEARBOXSLIP   : out std_logic;
        RX_REF_CNT      : out std_logic_vector(7 downto 0);
                
        -- FBERT.
        FBERT_run_rdy   : out std_logic;
        FBERT_BER_out   : out std_logic_vector(31 downto 0);
        
        FBERT_time_interval   : in std_logic_vector(31 downto 0);
        
        FBERT_state_out       : out std_logic_vector(2 downto 0)
    );
    end component;

    -- Transceiver Module 0.
    signal tm0_reset_i          : std_logic;
    
    signal tm0_TXVALID_i  : std_logic;
    signal tm0_TXSEQ_i    : std_logic_vector(6 downto 0);
    signal tm0_TXHEADER_i : std_logic_vector(1 downto 0);
    signal tm0_TXDATA_i   : std_logic_vector((DATA_WIDTH-1) downto 0);    

    signal tm0_RXVALID_i       : std_logic;
    signal tm0_RXHEADER_i      : std_logic_vector(1 downto 0);
    signal tm0_RXHEADERVALID_i : std_logic;
    signal tm0_RXDATA_i        : std_logic_vector((DATA_WIDTH-1) downto 0);
    signal tm0_RXGEARBOXSLIP_i : std_logic;
    signal tm0_RX_REF_CNT_i    : std_logic_vector(7 downto 0);
    
    signal tm0_FBERT_run_rdy_i : std_logic;
    signal tm0_FBERT_BER_out_i : std_logic_vector(31 downto 0);
    
    signal tm0_FBERT_time_interval_i   : std_logic_vector(31 downto 0);
    
    signal tm0_FBERT_state_out_i       : std_logic_vector(2 downto 0);
    
    -- Transceiver Module 1.
    signal tm1_reset_i          : std_logic;
    
    signal tm1_TXVALID_i  : std_logic;
    signal tm1_TXSEQ_i    : std_logic_vector(6 downto 0);
    signal tm1_TXHEADER_i : std_logic_vector(1 downto 0);
    signal tm1_TXDATA_i   : std_logic_vector((DATA_WIDTH-1) downto 0);    

    signal tm1_RXVALID_i       : std_logic;
    signal tm1_RXHEADER_i      : std_logic_vector(1 downto 0);
    signal tm1_RXHEADERVALID_i : std_logic;
    signal tm1_RXDATA_i        : std_logic_vector((DATA_WIDTH-1) downto 0);
    signal tm1_RXGEARBOXSLIP_i : std_logic; 
    signal tm1_RX_REF_CNT_i    : std_logic_vector(7 downto 0);
    
    signal tm1_FBERT_run_rdy_i : std_logic;
    signal tm1_FBERT_BER_out_i : std_logic_vector(31 downto 0);
    
    signal tm1_FBERT_time_interval_i   : std_logic_vector(31 downto 0);

    signal tm1_FBERT_state_out_i       : std_logic_vector(2 downto 0);


    -- Others
    signal drp_clk_toggler   : std_logic;
    signal error_counter_i   : std_logic_vector(7 downto 0);
    
    type STARTUP_STATE_TYPES is (ON_STARTUP, CONF_SI5324, STARTED);
    signal STARTUP_STATE : STARTUP_STATE_TYPES;



    signal SI5324_complete : std_logic;


    type SERIAL_STATES is (
        SI5324_RESET_1, SI5324_RESET_2, SI5324_WRITE, SI5324_FINISH, BULLSHIT_1, BULLSHIT_2,
        
        UART_BUSY, WAIT_FOR_UART_BUSY, WAIT_FOR_UART_NOT_BUSY, I2C_RX_TO_UART_TX,
        
        READ_ALL_A0h, READ_ALL_A2h_1, READ_ALL_A2h_2, READ_SFPs_1, READ_SFPs_2, SFP_SELECT_1, SFP_SELECT_2,
        
        SEND_BER_1, SEND_BER_2, SEND_BER_3,
        SEND_STATUS_1, SEND_STATUS_2,
        SEND_HEADER_1, SEND_HEADER_2,
        
        WAITING);       
        
        
    signal CURR_SERIAL_STATE : SERIAL_STATES; 
    signal NEXT_SERIAL_STATE : SERIAL_STATES;

    
    signal serial_header : std_logic_vector(7 downto 0);
    
        signal SI5324_counter  : natural := 0;
        signal RX_byte_counter : natural := 0;
        signal SFP_select_cnt  : natural := 0;
        signal fs_counter      : natural := 0;
        signal BER_counter     : natural := 0;
        signal READ_ALL_A2h_1_counter : natural := 0;



    signal BULLSHIT_cnt : unsigned(7 downto 0);
    signal BULLSHIT_cnt2 : integer;

--**************************** Main Body of Code *******************************
begin


serial_process:
-- Resets the Si5324 with its reset-pin according to the datasheet and the writes
-- values saved in ROM to the EEPROM registers with I2C. 
process(drpclk_in_i)--, tm0_reset_i)
begin
--    if tm0_reset_i = '0' then
--        CURR_SERIAL_STATE <= SI5324_RESET_1;
--    els
    if rising_edge(drpclk_in_i) then

        case CURR_SERIAL_STATE is

            -- First the reset-pin is set low for its minimum time.
            when SI5324_RESET_1 =>            
                
                SI5324_RST_LS <= '0';  -- Reset is active low.
                
                if SI5324_counter = 200 then -- Min reset time is 1 us = 100 clocks @ 100MHz.
              --if SI5324_counter = 1   then -- <= Simulation version, easier to simulate only one clock delay.
                
                    CURR_SERIAL_STATE <= SI5324_RESET_2;  -- Change to next state and assert the reset pin.
                    SI5324_counter    <= 0;
                else
                    SI5324_counter <= SI5324_counter + 1;
                end if;

                SI5324_complete    <= '0';


            
            when SI5324_RESET_2 => -- Now the reset pin is asserted and we wait the maximum time until 'access ready'.
            
                SI5324_RST_LS <= '1';
                
                if SI5324_counter = 1000000 then  -- Reset to Microprocessor Access Ready is maximum 10ms = 1M clocks @ 100MHz.
              --if SI5324_counter = 1 then        -- Simulation.
                    CURR_SERIAL_STATE <= SI5324_WRITE; -- Next state will start writing to the Si5324 over I2C.
                    SI5324_counter <= 0;
                else
                    SI5324_counter <= SI5324_counter + 1;
                end if;


            -- Signaling the IIC component to do the write procedure of all the registers.
            when SI5324_WRITE =>
                SI5324_RST_LS     <= '1';
                I2C_start         <= '1';
                I2C_device_sel    <= '1'; -- '1' = Si5324 writing.
                CURR_SERIAL_STATE <= SI5324_FINISH;

                -- These are set just for the sake of it, not needed though.
                I2C_index_start <= (others => '0');
                I2C_index_stop  <= (others => '0');
                I2C_SFP_REG_sel <= '0';


            -- Waiting for the write to complete.
            when SI5324_FINISH =>
                SI5324_RST_LS <= '1';
                I2C_start     <= '0';

                -- Adding an approximated delay of writing to the registers.
                                    --if SI5324_counter = 100000000 then -- Is this enough? idk
                if I2C_idle_state = '1' and SI5324_counter >= 15 then
                    SI5324_complete    <= '1';
                    CURR_SERIAL_STATE  <= SEND_HEADER_1;
                    
                    NEXT_SERIAL_STATE  <= READ_ALL_A0h;
                    --NEXT_SERIAL_STATE  <= BULLSHIT_1;
                    
                    serial_header      <= x"A1"; 
                    SI5324_counter     <= 0;
                else
                    SI5324_counter <= SI5324_counter + 1;
                end if;


            when SEND_HEADER_1 =>
            
                TX_byte  <= serial_header;
                TX_start <= '1';
                CURR_SERIAL_STATE <= SEND_HEADER_2;
                
            
            
            when SEND_HEADER_2 =>

                TX_start <= '0';
                
                --if TX_busy = '0' then
                    CURR_SERIAL_STATE <= WAIT_FOR_UART_BUSY;
                --end if;            
                
                
                
            -- Sets the address interval of the interesting registers at address A0h.
            when READ_ALL_A0h =>

                I2C_index_start <= std_logic_vector(to_unsigned(0,8));
                I2C_index_stop  <= std_logic_vector(to_unsigned(95+1,8));
                I2C_SFP_REG_sel <= '0';
                I2C_start <= '1';
                I2C_device_sel    <= '0'; -- '0' = MUX9548_to_SFP;

                RX_byte_counter <= 96*4;
                CURR_SERIAL_STATE <= I2C_RX_TO_UART_TX;                    
                NEXT_SERIAL_STATE <= READ_ALL_A2h_1;



            when READ_ALL_A2h_1 =>
                
                if READ_ALL_A2h_1_counter = 1000000 then
                    serial_header     <= x"A2";                 
                    CURR_SERIAL_STATE <= SEND_HEADER_1;
                    NEXT_SERIAL_STATE <= READ_ALL_A2h_2;
                else
                    READ_ALL_A2h_1_counter <= READ_ALL_A2h_1_counter + 1;
                end if;            
                                   
            -- Sets the address interval of the interesting registers at address A2h. 
            when READ_ALL_A2h_2 =>
                            
                I2C_index_start <= std_logic_vector(to_unsigned(0,8));
                I2C_index_stop  <= std_logic_vector(to_unsigned(117+1,8));
                I2C_SFP_REG_sel <= '1';
                I2C_start       <= '1';
                
                RX_byte_counter <= 118*4;
                CURR_SERIAL_STATE <= I2C_RX_TO_UART_TX;
                NEXT_SERIAL_STATE <= READ_SFPs_1;


            -- 
            when I2C_RX_TO_UART_TX =>
            
                I2C_start <= '0';
                            
                if RX_byte_counter = 0 and TX_busy = '0' then
                    CURR_SERIAL_STATE <= WAIT_FOR_UART_BUSY;
                end if;
        
                if I2C_read_done = '1' then
                    TX_start <= '1'; 
                    TX_byte  <= I2C_read_data;
                    RX_byte_counter <= RX_byte_counter - 1;
                else
                    TX_start <= '0';
                end if;                



            -- 
            when WAIT_FOR_UART_BUSY =>
                if TX_busy = '1' then
                    CURR_SERIAL_STATE <= WAIT_FOR_UART_NOT_BUSY;
                end if;


            -- 
            when WAIT_FOR_UART_NOT_BUSY =>
                if TX_busy = '0' then
                    CURR_SERIAL_STATE <= NEXT_SERIAL_STATE;
                end if;
 
 

            when READ_SFPs_1 =>
                
--                    if SFP_select_cnt = 0 then
                    serial_header <= x"A3";
--                    elsif SFP_select_cnt = 1 then
--                        serial_header <= x"A4";
--                    elsif SFP_select_cnt = 2 then
--                        serial_header <= x"A5";
--                    elsif SFP_select_cnt = 3 then
--                        serial_header <= x"A6";
--                    end if;
         
                CURR_SERIAL_STATE <= SEND_HEADER_1;
                NEXT_SERIAL_STATE <= READ_SFPs_2;
                
 
            -- This state only reads the RTS data.
            when READ_SFPs_2 =>
                                            
                I2C_index_start <= std_logic_vector(to_unsigned(96,8));
                I2C_index_stop  <= std_logic_vector(to_unsigned(105+1,8));
                I2C_SFP_REG_sel <= '1';
                I2C_start       <= '1';
                
                RX_byte_counter <= 10*4;
                CURR_SERIAL_STATE <= I2C_RX_TO_UART_TX;
                --NEXT_SERIAL_STATE <= SFP_SELECT_1;      
                NEXT_SERIAL_STATE <= SEND_BER_1;                               


            --  The IIC component actually read all four SFPs,
            --  this state only rotates through the readings.
--                when SFP_SELECT_1 =>
            
--                    if SFP_select_cnt = 4-1 then
--                        SFP_select_cnt    <= 0;
--                       -- TX_start          <= '0';
--                        CURR_SERIAL_STATE <= SEND_BER_1;
                    
--                    else
--                        --TX_start          <= '1';
--                        CURR_SERIAL_STATE <= READ_SFPs_1;
--                        --NEXT_SERIAL_STATE <= SFP_SELECT_1;
--                        SFP_select_cnt <= SFP_select_cnt + 1;
--                    end if;               


--                when SFP_SELECT_2 =>
            
--                    TX_start <= '0';
                
--                    if TX_busy = '0' then
--                        CURR_SERIAL_STATE <= WAIT_FOR_UART_BUSY;
--                    end if;
                
                
                
        when SEND_BER_1 =>

        
--                if BER_counter = 0 and TX_busy = '0' then
--                    CURR_SERIAL_STATE <= WAIT_FOR_UART_BUSY;
--                end if;

            serial_header <= x"A7";
            
            CURR_SERIAL_STATE <= SEND_HEADER_1;
            NEXT_SERIAL_STATE <= SEND_BER_2;
            
            TX_start <= '1';
        
        
        
        
        when SEND_BER_2 =>
                 
                TX_start <= '1';
                if BER_counter = 0 then
                    BER_counter <= BER_counter + 1;
                    TX_byte  <= tm0_FBERT_BER_out_i(7 downto 0);
                    CURR_SERIAL_STATE <= SEND_BER_3;
                    NEXT_SERIAL_STATE <= SEND_BER_2;
                elsif BER_counter = 1 then
                    BER_counter <= BER_counter + 1;
                    TX_byte  <= tm0_FBERT_BER_out_i(15 downto 8);
                    CURR_SERIAL_STATE <= SEND_BER_3;
                    NEXT_SERIAL_STATE <= SEND_BER_2;
                elsif BER_counter = 2 then
                    BER_counter <= BER_counter + 1;
                    TX_byte  <= tm0_FBERT_BER_out_i(23 downto 16);
                    CURR_SERIAL_STATE <= SEND_BER_3;
                    NEXT_SERIAL_STATE <= SEND_BER_2;
                elsif BER_counter = 3 then
                    BER_counter <= 0;
                    TX_byte  <= tm0_FBERT_BER_out_i(31 downto 24);
                    CURR_SERIAL_STATE <= SEND_BER_3;
                    NEXT_SERIAL_STATE <= SEND_STATUS_1;
                end if;                   
               
                            
        when SEND_BER_3 =>
            
            TX_start <= '0';       
            CURR_SERIAL_STATE <= WAIT_FOR_UART_BUSY;                                    
            
            
            
            
        when SEND_STATUS_1 =>
        
            TX_start <= '1';
            
            TX_byte(0) <= SFP_LOS_0;--'0';--SFP_LOS(0);
            TX_byte(1) <= tm0_RXHEADER_i(0);
            TX_byte(2) <= tm0_RXHEADER_i(1);
            TX_byte(3) <= tm0_RXVALID_i;
            TX_byte(4) <= tm0_FBERT_state_out_i(0);
            TX_byte(5) <= tm0_FBERT_state_out_i(1);
            TX_byte(6) <= tm0_FBERT_state_out_i(2);
            TX_byte(7) <= '0';
            
            CURR_SERIAL_STATE <= SEND_STATUS_2;
            NEXT_SERIAL_STATE <= WAITING;
            
                            
        when SEND_STATUS_2 =>
            
            TX_start <= '0';
            CURR_SERIAL_STATE <= WAIT_FOR_UART_BUSY;
            
                     
            
        when WAITING =>
        
            if fs_counter = 4000000 then
                fs_counter <= 0;
                CURR_SERIAL_STATE <= READ_SFPs_1;
            else
                fs_counter <= fs_counter + 1;
            end if;
                            
                            
        when others =>
            CURR_SERIAL_STATE <= WAITING;
            
        end case;
    end if;
end process;



    --  Static signal Assigments
    tied_to_ground_i                             <= '0';
    tied_to_ground_vec_i                         <= x"0000000000000000";
    tied_to_vcc_i                                <= '1';
    tied_to_vcc_vec_i                            <= "11111111";
    q3_clk1_refclk_i                             <= '0';
    
    
    RX <= USB_UART_TX;
    USB_UART_RX <= TX;
    
    RXN_IN          <= SFP_RX_N;
    RXP_IN          <= SFP_RX_P;
    SFP_TX_N        <= TXN_OUT;
    SFP_TX_P        <= TXP_OUT;
    --LOS_LS          <= SFP_LOS;
    --MOD_DETECT_LS   <= SFP_MOD_DETECT;
    --TX_FAULT_LS     <= SFP_TX_FAULT;
    SFP_TX_DISABLE  <= TX_DISABLE_LS_B;
    TX_DISABLE_LS_B <= (others => c_btn);    
    
    GPIO_LED   <= LED;
    SM_FAN_PWM <= fan_out;
    c_btn      <= GPIO_SW_C;
    reset_btn     <= not CPU_RESET;
    not_reset_btn <= CPU_RESET;


UART_comp: component UART
    generic map ( baud => 921600, clock_frequency => 200000000 )
    port map ( clk => drpclk_in_i, reset => reset_btn, TX => TX, RX => RX,
               TX_byte => TX_byte, RX_byte => RX_byte, TX_start => TX_start,
               TX_busy => TX_busy, RX_complete => RX_complete );
               
               
I2C_comp: component VC709_I2C_inits
    port map (
        clk         => drpclk_in_i,
        reset_in    => reset_btn,
        mux_reset   => IIC_MUX_RESET_B_LS,
        idle_state  => I2C_idle_state,
        start       => I2C_start,
        read_done   => I2C_read_done,
        read_data   => I2C_read_data,
        
        index_start => I2C_index_start,
        index_stop  => I2C_index_stop,
        
        SFP_REG_sel => I2C_SFP_REG_sel,
        device_sel  => I2C_device_sel,
        
        sda         => IIC_SDA_MAIN_LS,
        scl         => IIC_SCL_MAIN_LS
    );    

--------------------------------------------------------------------------------
-- PROCESSES
--------------------------------------------------------------------------------
startup_reset_process:
process(drpclk_in_i, reset_btn)
begin
    if reset_btn = '0' then
        STARTUP_STATE <= ON_STARTUP;
        startup_reset_done <= '0';
    elsif rising_edge(drpclk_in_i) then
        case STARTUP_STATE is
            when ON_STARTUP =>
            
                tm1_reset_i <= '0';
                tm0_reset_i <= '0';
                
                startup_reset_done <= '0';
                STARTUP_STATE <= CONF_SI5324;
                
            when CONF_SI5324 =>
                if SI5324_complete = '1' then
                    STARTUP_STATE <= STARTED;
                else
                    STARTUP_STATE <= CONF_SI5324;
                end if;
                
            when STARTED =>
            
                tm1_reset_i <= gt1_txfsmresetdone_r2;
                tm0_reset_i <= gt0_txfsmresetdone_r2;
                
                startup_reset_done <= '1';
                STARTUP_STATE <= STARTED;
                
            when others =>
                STARTUP_STATE <= ON_STARTUP;
            
        end case;
    end if;
end process;


tm0:
component transceiver_module
generic map (
    DATA_WIDTH => DATA_WIDTH,
    N_WIDTH    => 127,
    K_WIDTH    => 113,
    BUF_WIDTH  => 16
)
port map(
    -- CLOCKS.
    tx_clk          => gt0_txusrclk2_i,
    rx_clk          => gt0_rxusrclk2_i,
    
    -- RESETS.
    reset_in        => tm0_reset_i,
    
    -- TX PORTS.
    TXVALID         => tm0_TXVALID_i,
    TXSEQ           => tm0_TXSEQ_i,
    TXHEADER        => tm0_TXHEADER_i,
    TXDATA          => tm0_TXDATA_i,
    
    -- RX PORTS.
    RXVALID         => tm0_RXVALID_i,
    RXHEADER        => tm0_RXHEADER_i,
    RXHEADERVALID   => tm0_RXHEADERVALID_i,
    RXDATA          => tm0_RXDATA_i,
    RXGEARBOXSLIP   => tm0_RXGEARBOXSLIP_i,
    RX_REF_CNT      => tm0_RX_REF_CNT_i,
            
    -- FBERT.
    FBERT_run_rdy   => tm0_FBERT_run_rdy_i,
    FBERT_BER_out   => tm0_FBERT_BER_out_i,
    
    FBERT_time_interval   => tm0_FBERT_time_interval_i,
    
    FBERT_state_out       => tm0_FBERT_state_out_i
);

    tm0_FBERT_time_interval_i   <= x"0000FFFF";


tm1:
component transceiver_module
generic map (
    DATA_WIDTH => DATA_WIDTH,
    N_WIDTH    => 127,
    K_WIDTH    => 113,
    BUF_WIDTH  => 16
)
port map(
    -- CLOCKS.
    tx_clk          => gt1_txusrclk2_i,
    rx_clk          => gt1_rxusrclk2_i,
    
    -- RESETS.
    reset_in        => tm1_reset_i,
    
    -- TX PORTS.
    TXVALID         => tm1_TXVALID_i,
    TXSEQ           => tm1_TXSEQ_i,
    TXHEADER        => tm1_TXHEADER_i,
    TXDATA          => tm1_TXDATA_i,
    
    -- RX PORTS.
    RXVALID         => tm1_RXVALID_i,
    RXHEADER        => tm1_RXHEADER_i,
    RXHEADERVALID   => tm1_RXHEADERVALID_i,
    RXDATA          => tm1_RXDATA_i,
    RXGEARBOXSLIP   => tm1_RXGEARBOXSLIP_i,
    RX_REF_CNT      => tm1_RX_REF_CNT_i,
            
    -- FBERT.
    FBERT_run_rdy   => tm1_FBERT_run_rdy_i,
    FBERT_BER_out   => tm1_FBERT_BER_out_i,
    
    FBERT_time_interval => tm1_FBERT_time_interval_i,
    
    FBERT_state_out     => tm1_FBERT_state_out_i
);


    tm1_FBERT_time_interval_i   <= x"0000FFFF";
    
    
LED_process_0:
--process(GPIO_DIP,gt0_error_count_i,drp_clk_toggler,reset_btn,STARTUP_STATE,tm0_FBERT_run_rdy_i,tm1_FBERT_run_rdy_i,tm0_FBERT_BER_out_i,tm1_FBERT_BER_out_i,tm0_FBERT_run_rdy_i,tm1_FBERT_run_rdy_i,gt0_txfsmresetdone_r2,gt1_txfsmresetdone_r2,gt2_error_count_i,gt3_error_count_i,tm0_FBERT_state_out_i,tm1_FBERT_state_out_i,tm0_RXVALID_i,tm0_RXHEADER_i,tm0_RXHEADERVALID_i,tm0_RXGEARBOXSLIP_i,tm1_RXVALID_i,tm1_RXHEADER_i,tm1_RXHEADERVALID_i,tm1_RXGEARBOXSLIP_i,tm0_RX_REF_CNT_i,tm1_RX_REF_CNT_i)
--process(drpclk_in_i)
process(gt0_rxusrclk2_i)
begin

--    if rising_edge(gt0_rxusrclk2_i) then
    
    case GPIO_DIP is
    
--        -- CHECK CLOCKS.
--        when "00000000" =>
--            LED(0) <= drp_clk_toggler;
--            LED(1) <= reset_btn;
--            if STARTUP_STATE = STARTED then
--                LED(2) <= '1';
--            else
--                LED(2) <= '0';
--            end if;
--            LED(7 downto 3) <= (others=>'0');
            
        when "00000001" =>
            if tm0_FBERT_run_rdy_i = '1' then
                LED <= tm0_FBERT_BER_out_i(7 downto 0);
            end if;
            
--        when "00000010" =>
--            if tm1_FBERT_run_rdy_i = '1' then
--                LED <= tm1_FBERT_BER_out_i(7 downto 0);
--            end if;
            
        when "00000011" =>
            LED(0) <= tm0_FBERT_run_rdy_i;
            --LED(1) <= tm1_FBERT_run_rdy_i;
            --LED(2) <= gt0_txfsmresetdone_r2;
            --LED(3) <= gt1_txfsmresetdone_r2;
            LED(7 downto 1) <= (others=>'0');
        
--        when "00000100" =>
--            LED <= gt2_error_count_i;
                        
--        when "00000101" =>
--            LED <= gt3_error_count_i;
            
        when "00000110" =>
            case tm0_FBERT_state_out_i is
                when "000" =>
                    LED <= "00000001";-- 
                when "001" =>
                    LED <= "00000010";-- IDLE
                when "010" =>
                    LED <= "00000100";-- SYNC_RX
                when "011" =>
                    LED <= "00001000";-- RX_SYNCED
                when "100" =>
                    LED <= "00010000";-- SYNC_BER_CALCULATOR
                when "101" =>
                    LED <= "00100000";-- FBERT_RUN
                when "110" =>
                    LED <= "01000000";-- FBERT_END
                when "111" =>
                    LED <= "10000000";-- 
                when others =>
                    LED <= "00000000";--
            end case;
            
--        when "00000111" =>
        
--            case tm1_FBERT_state_out_i is
--                when "000" =>
--                    LED <= "00000001";
--                when "001" =>
--                    LED <= "00000010";
--                when "010" =>
--                    LED <= "00000100";
--                when "011" =>
--                    LED <= "00001000";
--                when "100" =>
--                    LED <= "00010000";
--                when "101" =>
--                    LED <= "00100000";
--                when "110" =>
--                    LED <= "01000000";
--                when "111" =>
--                    LED <= "10000000";
--                when others =>
--                    LED <= "00000000";
--            end case;
            
        when "00001000" =>                        
            LED(0) <= tm0_RXVALID_i;
            LED(1) <= tm0_RXHEADER_i(0);
            LED(2) <= tm0_RXHEADER_i(1);
            LED(3) <= tm0_RXHEADERVALID_i;   
            LED(4) <= tm0_RXGEARBOXSLIP_i; 
            LED(7 downto 5) <= (others=>'0');
                             
--        when "00001001" =>                        
--            LED(0) <= tm1_RXVALID_i;
--            LED(1) <= tm1_RXHEADER_i(0);
--            LED(2) <= tm1_RXHEADER_i(1);
--            LED(3) <= tm1_RXHEADERVALID_i;   
--            LED(4) <= tm1_RXGEARBOXSLIP_i; 
--            LED(7 downto 5) <= (others=>'0');

        when "00001011" =>    
            LED <= tm0_RX_REF_CNT_i;               
        
--        when "00001010" =>    
--            LED <= tm1_RX_REF_CNT_i; 
                           
        when others =>
    end case;
--    end if;
    
end process;



FAN_PWM_Process:
process(drpclk_in_i)
variable counter : natural := 0;
begin
    if rising_edge(drpclk_in_i) then
        if counter < 50000 then
            counter := counter + 1;
            fan_out <= '1';
        elsif counter = 100000 then
            counter := 0;
        else
            counter := counter + 1;
            fan_out <= '0';
        end if;

    end if;
end process;  

drpclk_in_i_process_0:
process(drpclk_in_i)
variable counter : natural := 0;
variable drp_counter : natural := 0;
begin

    if rising_edge(drpclk_in_i) then
    
        if drp_counter = (200000000/2 - 1) then
            drp_counter := 0;
            drp_clk_toggler <= not drp_clk_toggler;
        else
            drp_counter := drp_counter + 1;
        end if;        
    end if;
end process;    
    
    
    
----------------------------- The GT Wrapper -----------------------------
-- Use the instantiation template in the example directory to add the GT wrapper to your design.
-- In this example, the wrapper is wired up for basic operation with a frame generator and frame 
-- checker. The GTs will reset, then attempt to align and transmit data. If channel bonding is 
-- enabled, bonding should occur after alignment.
gtwizard_0_support_i: gtwizard_0_support
generic map
(
    EXAMPLE_SIM_GTRESET_SPEEDUP     =>      EXAMPLE_SIM_GTRESET_SPEEDUP,
    STABLE_CLOCK_PERIOD             =>      STABLE_CLOCK_PERIOD
)
port map
(
    SOFT_RESET_TX_IN                =>      soft_reset_i,
    SOFT_RESET_RX_IN                =>      soft_reset_i,
    DONT_RESET_ON_DATA_ERROR_IN     =>      tied_to_ground_i,
    Q3_CLK1_GTREFCLK_PAD_N_IN       =>      Q3_CLK1_GTREFCLK_PAD_N_IN,
    Q3_CLK1_GTREFCLK_PAD_P_IN       =>      Q3_CLK1_GTREFCLK_PAD_P_IN,

    GT0_TX_MMCM_LOCK_OUT            =>      gt0_txmmcm_lock_i,
    GT0_RX_MMCM_LOCK_OUT            =>      gt0_rxmmcm_lock_i,
    GT0_TX_FSM_RESET_DONE_OUT       =>      gt0_txfsmresetdone_i,
    GT0_RX_FSM_RESET_DONE_OUT       =>      gt0_rxfsmresetdone_i,
    GT0_DATA_VALID_IN               =>      gt0_track_data_i,
    GT1_TX_MMCM_LOCK_OUT            =>      gt1_txmmcm_lock_i,
    GT1_RX_MMCM_LOCK_OUT            =>      gt1_rxmmcm_lock_i,
    GT1_TX_FSM_RESET_DONE_OUT       =>      gt1_txfsmresetdone_i,
    GT1_RX_FSM_RESET_DONE_OUT       =>      gt1_rxfsmresetdone_i,
    GT1_DATA_VALID_IN               =>      gt1_track_data_i,
    GT2_TX_MMCM_LOCK_OUT            =>      gt2_txmmcm_lock_i,
    GT2_RX_MMCM_LOCK_OUT            =>      gt2_rxmmcm_lock_i,
    GT2_TX_FSM_RESET_DONE_OUT       =>      gt2_txfsmresetdone_i,
    GT2_RX_FSM_RESET_DONE_OUT       =>      gt2_rxfsmresetdone_i,
    GT2_DATA_VALID_IN               =>      gt2_track_data_i,
    GT3_TX_MMCM_LOCK_OUT            =>      gt3_txmmcm_lock_i,
    GT3_RX_MMCM_LOCK_OUT            =>      gt3_rxmmcm_lock_i,
    GT3_TX_FSM_RESET_DONE_OUT       =>      gt3_txfsmresetdone_i,
    GT3_RX_FSM_RESET_DONE_OUT       =>      gt3_rxfsmresetdone_i,
    GT3_DATA_VALID_IN               =>      gt3_track_data_i,

    GT0_TXUSRCLK_OUT    => gt0_txusrclk_i,
    GT0_TXUSRCLK2_OUT   => gt0_txusrclk2_i,
    GT0_RXUSRCLK_OUT    => gt0_rxusrclk_i,
    GT0_RXUSRCLK2_OUT   => gt0_rxusrclk2_i,
 
    GT1_TXUSRCLK_OUT    => gt1_txusrclk_i,
    GT1_TXUSRCLK2_OUT   => gt1_txusrclk2_i,
    GT1_RXUSRCLK_OUT    => gt1_rxusrclk_i,
    GT1_RXUSRCLK2_OUT   => gt1_rxusrclk2_i,
 
    GT2_TXUSRCLK_OUT    => gt2_txusrclk_i,
    GT2_TXUSRCLK2_OUT   => gt2_txusrclk2_i,
    GT2_RXUSRCLK_OUT    => gt2_rxusrclk_i,
    GT2_RXUSRCLK2_OUT   => gt2_rxusrclk2_i,
 
    GT3_TXUSRCLK_OUT    => gt3_txusrclk_i,
    GT3_TXUSRCLK2_OUT   => gt3_txusrclk2_i,
    GT3_RXUSRCLK_OUT    => gt3_rxusrclk_i,
    GT3_RXUSRCLK2_OUT   => gt3_rxusrclk2_i,


    --_____________________________________________________________________
    --_____________________________________________________________________
    --GT0  (X1Y12)

    ---------------------------- Channel - DRP Ports  --------------------------
    gt0_drpaddr_in                  =>      gt0_drpaddr_i,
    gt0_drpdi_in                    =>      gt0_drpdi_i,
    gt0_drpdo_out                   =>      gt0_drpdo_i,
    gt0_drpen_in                    =>      gt0_drpen_i,
    gt0_drprdy_out                  =>      gt0_drprdy_i,
    gt0_drpwe_in                    =>      gt0_drpwe_i,
    ------------------------------- Loopback Ports -----------------------------
    gt0_loopback_in                 =>      "000",
    ----------------------------- PCI Express Ports ----------------------------
    gt0_rxrate_in                   =>      gt0_rxrate_i,
    --------------------- RX Initialization and Reset Ports --------------------
    gt0_eyescanreset_in             =>      tied_to_ground_i,
    gt0_rxuserrdy_in                =>      tied_to_ground_i,
    -------------------------- RX Margin Analysis Ports ------------------------
    gt0_eyescandataerror_out        =>      gt0_eyescandataerror_i,
    gt0_eyescantrigger_in           =>      tied_to_ground_i,
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt0_rxcdrhold_in                =>      gt0_rxcdrhold_i,
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt0_dmonitorout_out             =>      gt0_dmonitorout_i,
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
--gt0_rxdata_out                  =>      gt0_rxdata_i,
    gt0_rxdata_out                  =>      tm0_RXDATA_i,
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt0_rxprbserr_out               =>      gt0_rxprbserr_i,
    gt0_rxprbssel_in                =>      gt0_rxprbssel_i,
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt0_rxprbscntreset_in           =>      gt0_rxprbscntreset_i,
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt0_gthrxn_in                   =>      RXN_IN(0),
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt0_rxbufreset_in               =>      gt0_rxbufreset_i,
    gt0_rxbufstatus_out             =>      gt0_rxbufstatus_i,
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt0_rxdfelpmreset_in            =>      tied_to_ground_i,
    gt0_rxmonitorout_out            =>      gt0_rxmonitorout_i,
    gt0_rxmonitorsel_in             =>      "00",
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt0_rxratedone_out              =>      gt0_rxratedone_i,
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt0_rxoutclkfabric_out          =>      gt0_rxoutclkfabric_i,
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
--gt0_rxdatavalid_out             =>      gt0_rxdatavalid_i,
    gt0_rxdatavalid_out             =>      tm0_RXVALID_i,
--gt0_rxheader_out                =>      gt0_rxheader_i,
    gt0_rxheader_out                =>      tm0_RXHEADER_i,
--gt0_rxheadervalid_out           =>      gt0_rxheadervalid_i,
    gt0_rxheadervalid_out           =>      tm0_RXHEADERVALID_i,
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
--gt0_rxgearboxslip_in            =>      gt0_rxgearboxslip_i,
    gt0_rxgearboxslip_in            =>      tm0_RXGEARBOXSLIP_i,
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt0_gtrxreset_in                =>      tied_to_ground_i,
    gt0_rxpcsreset_in               =>      tied_to_ground_i,
    gt0_rxpmareset_in               =>      gt0_rxpmareset_i,
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt0_rxlpmen_in                  =>      gt0_rxlpmen_i,
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt0_rxpolarity_in               =>      gt0_rxpolarity_i,
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt0_gthrxp_in                   =>      RXP_IN(0),
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt0_rxresetdone_out             =>      gt0_rxresetdone_i,
    ------------------------ TX Configurable Driver Ports ----------------------
    gt0_txpostcursor_in             =>      gt0_txpostcursor_i,
    gt0_txprecursor_in              =>      gt0_txprecursor_i,
    --------------------- TX Initialization and Reset Ports --------------------
    gt0_gttxreset_in                =>      tied_to_ground_i,
    gt0_txuserrdy_in                =>      tied_to_ground_i,
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
--gt0_txheader_in                 =>      gt0_txheader_r,
    gt0_txheader_in                 =>      tm0_TXHEADER_i,
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt0_txprbsforceerr_in           =>      gt0_txprbsforceerr_i,
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt0_txbufstatus_out             =>      gt0_txbufstatus_i,
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt0_txdiffctrl_in               =>      "1110",
    gt0_txinhibit_in                =>      gt0_txinhibit_i,
    gt0_txmaincursor_in             =>      "0111000",
    ------------------ Transmit Ports - TX Data Path interface -----------------
--gt0_txdata_in                   =>      gt0_scrambled_data_i,
    gt0_txdata_in                   =>      tm0_TXDATA_i,
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt0_gthtxn_out                  =>      TXN_OUT(0),
    gt0_gthtxp_out                  =>      TXP_OUT(0),
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt0_txoutclkfabric_out          =>      gt0_txoutclkfabric_i,
    gt0_txoutclkpcs_out             =>      gt0_txoutclkpcs_i,
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
--gt0_txsequence_in               =>      gt0_txsequence_i,
    gt0_txsequence_in               =>      tm0_TXSEQ_i,
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt0_txpcsreset_in               =>      tied_to_ground_i,
    gt0_txresetdone_out             =>      gt0_txresetdone_i,
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt0_txpolarity_in               =>      gt0_txpolarity_i,
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt0_txprbssel_in                =>      gt0_txprbssel_i,



    --_____________________________________________________________________
    --_____________________________________________________________________
    --GT1  (X1Y13)

    ---------------------------- Channel - DRP Ports  --------------------------
    gt1_drpaddr_in                  =>      gt1_drpaddr_i,
    gt1_drpdi_in                    =>      gt1_drpdi_i,
    gt1_drpdo_out                   =>      gt1_drpdo_i,
    gt1_drpen_in                    =>      gt1_drpen_i,
    gt1_drprdy_out                  =>      gt1_drprdy_i,
    gt1_drpwe_in                    =>      gt1_drpwe_i,
    ------------------------------- Loopback Ports -----------------------------
    gt1_loopback_in                 =>      "000",
    ----------------------------- PCI Express Ports ----------------------------
    gt1_rxrate_in                   =>      gt1_rxrate_i,
    --------------------- RX Initialization and Reset Ports --------------------
    gt1_eyescanreset_in             =>      tied_to_ground_i,
    gt1_rxuserrdy_in                =>      tied_to_ground_i,
    -------------------------- RX Margin Analysis Ports ------------------------
    gt1_eyescandataerror_out        =>      gt1_eyescandataerror_i,
    gt1_eyescantrigger_in           =>      tied_to_ground_i,
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt1_rxcdrhold_in                =>      gt1_rxcdrhold_i,
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt1_dmonitorout_out             =>      gt1_dmonitorout_i,
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
--gt1_rxdata_out                  =>      gt1_rxdata_i,
    gt1_rxdata_out                  =>      tm1_RXDATA_i,
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt1_rxprbserr_out               =>      gt1_rxprbserr_i,
    gt1_rxprbssel_in                =>      gt1_rxprbssel_i,
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt1_rxprbscntreset_in           =>      gt1_rxprbscntreset_i,
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt1_gthrxn_in                   =>      RXN_IN(1),
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt1_rxbufreset_in               =>      gt1_rxbufreset_i,
    gt1_rxbufstatus_out             =>      gt1_rxbufstatus_i,
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt1_rxdfelpmreset_in            =>      tied_to_ground_i,
    gt1_rxmonitorout_out            =>      gt1_rxmonitorout_i,
    gt1_rxmonitorsel_in             =>      "00",
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt1_rxratedone_out              =>      gt1_rxratedone_i,
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt1_rxoutclkfabric_out          =>      gt1_rxoutclkfabric_i,
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
--gt1_rxdatavalid_out             =>      gt1_rxdatavalid_i,
    gt1_rxdatavalid_out             =>      tm1_RXVALID_i,
--gt1_rxheader_out                =>      gt1_rxheader_i,
    gt1_rxheader_out                =>      tm1_RXHEADER_i,
--gt1_rxheadervalid_out           =>      gt1_rxheadervalid_i,
    gt1_rxheadervalid_out           =>      tm1_RXHEADERVALID_i,
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
--gt1_rxgearboxslip_in            =>      gt1_rxgearboxslip_i,
    gt1_rxgearboxslip_in            =>      tm1_RXGEARBOXSLIP_i,
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt1_gtrxreset_in                =>      tied_to_ground_i,
    gt1_rxpcsreset_in               =>      tied_to_ground_i,
    gt1_rxpmareset_in               =>      gt1_rxpmareset_i,
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt1_rxlpmen_in                  =>      gt1_rxlpmen_i,
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt1_rxpolarity_in               =>      gt1_rxpolarity_i,
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt1_gthrxp_in                   =>      RXP_IN(1),
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt1_rxresetdone_out             =>      gt1_rxresetdone_i,
    ------------------------ TX Configurable Driver Ports ----------------------
    gt1_txpostcursor_in             =>      gt1_txpostcursor_i,
    gt1_txprecursor_in              =>      gt1_txprecursor_i,
    --------------------- TX Initialization and Reset Ports --------------------
    gt1_gttxreset_in                =>      tied_to_ground_i,
    gt1_txuserrdy_in                =>      tied_to_ground_i,
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
--gt1_txheader_in                 =>      gt1_txheader_r,
    gt1_txheader_in                 =>      tm1_TXHEADER_i,
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt1_txprbsforceerr_in           =>      gt1_txprbsforceerr_i,
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt1_txbufstatus_out             =>      gt1_txbufstatus_i,
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt1_txdiffctrl_in               =>      "1110",
    gt1_txinhibit_in                =>      gt1_txinhibit_i,
    gt1_txmaincursor_in             =>      "0111000",
    ------------------ Transmit Ports - TX Data Path interface -----------------
--gt1_txdata_in                   =>      gt1_scrambled_data_i,
    gt1_txdata_in                   =>      tm1_TXDATA_i,
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt1_gthtxn_out                  =>      TXN_OUT(1),
    gt1_gthtxp_out                  =>      TXP_OUT(1),
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt1_txoutclkfabric_out          =>      gt1_txoutclkfabric_i,
    gt1_txoutclkpcs_out             =>      gt1_txoutclkpcs_i,
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
--gt1_txsequence_in               =>      gt1_txsequence_i,
    gt1_txsequence_in               =>      tm1_TXSEQ_i,
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt1_txpcsreset_in               =>      tied_to_ground_i,
    gt1_txresetdone_out             =>      gt1_txresetdone_i,
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt1_txpolarity_in               =>      gt1_txpolarity_i,
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt1_txprbssel_in                =>      gt1_txprbssel_i,



    --_____________________________________________________________________
    --_____________________________________________________________________
    --GT2  (X1Y14)

    ---------------------------- Channel - DRP Ports  --------------------------
    gt2_drpaddr_in                  =>      gt2_drpaddr_i,
    gt2_drpdi_in                    =>      gt2_drpdi_i,
    gt2_drpdo_out                   =>      gt2_drpdo_i,
    gt2_drpen_in                    =>      gt2_drpen_i,
    gt2_drprdy_out                  =>      gt2_drprdy_i,
    gt2_drpwe_in                    =>      gt2_drpwe_i,
    ------------------------------- Loopback Ports -----------------------------
    gt2_loopback_in                 =>      "000",
    ----------------------------- PCI Express Ports ----------------------------
    gt2_rxrate_in                   =>      gt2_rxrate_i,
    --------------------- RX Initialization and Reset Ports --------------------
    gt2_eyescanreset_in             =>      tied_to_ground_i,
    gt2_rxuserrdy_in                =>      tied_to_ground_i,
    -------------------------- RX Margin Analysis Ports ------------------------
    gt2_eyescandataerror_out        =>      gt2_eyescandataerror_i,
    gt2_eyescantrigger_in           =>      tied_to_ground_i,
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt2_rxcdrhold_in                =>      gt2_rxcdrhold_i,
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt2_dmonitorout_out             =>      gt2_dmonitorout_i,
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
gt2_rxdata_out                  =>      gt2_rxdata_i,
    --gt2_rxdata_out                  =>      tm2_RXDATA_i,
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt2_rxprbserr_out               =>      gt2_rxprbserr_i,
    gt2_rxprbssel_in                =>      gt2_rxprbssel_i,
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt2_rxprbscntreset_in           =>      gt2_rxprbscntreset_i,
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt2_gthrxn_in                   =>      RXN_IN(2),
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt2_rxbufreset_in               =>      gt2_rxbufreset_i,
    gt2_rxbufstatus_out             =>      gt2_rxbufstatus_i,
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt2_rxdfelpmreset_in            =>      tied_to_ground_i,
    gt2_rxmonitorout_out            =>      gt2_rxmonitorout_i,
    gt2_rxmonitorsel_in             =>      "00",
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt2_rxratedone_out              =>      gt2_rxratedone_i,
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt2_rxoutclkfabric_out          =>      gt2_rxoutclkfabric_i,
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
gt2_rxdatavalid_out             =>      gt2_rxdatavalid_i,
    --gt2_rxdatavalid_out             =>      tm2_RXVALID_i,
gt2_rxheader_out                =>      gt2_rxheader_i,
    --gt2_rxheader_out                =>      tm2_RXHEADER_i,
gt2_rxheadervalid_out           =>      gt2_rxheadervalid_i,
    --gt2_rxheadervalid_out           =>      tm2_RXHEADERVALID_i,
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    gt2_rxgearboxslip_in            =>      gt2_rxgearboxslip_i,
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt2_gtrxreset_in                =>      tied_to_ground_i,
    gt2_rxpcsreset_in               =>      tied_to_ground_i,
    gt2_rxpmareset_in               =>      gt2_rxpmareset_i,
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt2_rxlpmen_in                  =>      gt2_rxlpmen_i,
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt2_rxpolarity_in               =>      gt2_rxpolarity_i,
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt2_gthrxp_in                   =>      RXP_IN(2),
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt2_rxresetdone_out             =>      gt2_rxresetdone_i,
    ------------------------ TX Configurable Driver Ports ----------------------
    gt2_txpostcursor_in             =>      gt2_txpostcursor_i,
    gt2_txprecursor_in              =>      gt2_txprecursor_i,
    --------------------- TX Initialization and Reset Ports --------------------
    gt2_gttxreset_in                =>      tied_to_ground_i,
    gt2_txuserrdy_in                =>      tied_to_ground_i,
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
gt2_txheader_in                 =>      gt2_txheader_r,
    --gt2_txheader_in                 =>      tm2_TXHEADER_i,
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt2_txprbsforceerr_in           =>      gt2_txprbsforceerr_i,
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt2_txbufstatus_out             =>      gt2_txbufstatus_i,
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt2_txdiffctrl_in               =>      "1110",
    gt2_txinhibit_in                =>      gt2_txinhibit_i,
    gt2_txmaincursor_in             =>      "0111000",
    ------------------ Transmit Ports - TX Data Path interface -----------------
gt2_txdata_in                   =>      gt2_scrambled_data_i,
    --gt2_txdata_in                   =>      tm2_TXDATA_i,
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt2_gthtxn_out                  =>      TXN_OUT(2),
    gt2_gthtxp_out                  =>      TXP_OUT(2),
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt2_txoutclkfabric_out          =>      gt2_txoutclkfabric_i,
    gt2_txoutclkpcs_out             =>      gt2_txoutclkpcs_i,
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
gt2_txsequence_in               =>      gt2_txsequence_i,
    --gt2_txsequence_in               =>      tm2_TXSEQ_i,
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt2_txpcsreset_in               =>      tied_to_ground_i,
    gt2_txresetdone_out             =>      gt2_txresetdone_i,
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt2_txpolarity_in               =>      gt2_txpolarity_i,
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt2_txprbssel_in                =>      gt2_txprbssel_i,



    --_____________________________________________________________________
    --_____________________________________________________________________
    --GT3  (X1Y15)

    ---------------------------- Channel - DRP Ports  --------------------------
    gt3_drpaddr_in                  =>      gt3_drpaddr_i,
    gt3_drpdi_in                    =>      gt3_drpdi_i,
    gt3_drpdo_out                   =>      gt3_drpdo_i,
    gt3_drpen_in                    =>      gt3_drpen_i,
    gt3_drprdy_out                  =>      gt3_drprdy_i,
    gt3_drpwe_in                    =>      gt3_drpwe_i,
    ------------------------------- Loopback Ports -----------------------------
    gt3_loopback_in                 =>      "000",
    ----------------------------- PCI Express Ports ----------------------------
    gt3_rxrate_in                   =>      gt3_rxrate_i,
    --------------------- RX Initialization and Reset Ports --------------------
    gt3_eyescanreset_in             =>      tied_to_ground_i,
    gt3_rxuserrdy_in                =>      tied_to_ground_i,
    -------------------------- RX Margin Analysis Ports ------------------------
    gt3_eyescandataerror_out        =>      gt3_eyescandataerror_i,
    gt3_eyescantrigger_in           =>      tied_to_ground_i,
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt3_rxcdrhold_in                =>      gt3_rxcdrhold_i,
    ------------------- Receive Ports - Digital Monitor Ports ------------------
    gt3_dmonitorout_out             =>      gt3_dmonitorout_i,
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
gt3_rxdata_out                  =>      gt3_rxdata_i,
    --gt3_rxdata_out                  =>      tm3_RXDATA_i,
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt3_rxprbserr_out               =>      gt3_rxprbserr_i,
    gt3_rxprbssel_in                =>      gt3_rxprbssel_i,
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt3_rxprbscntreset_in           =>      gt3_rxprbscntreset_i,
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt3_gthrxn_in                   =>      RXN_IN(3),
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt3_rxbufreset_in               =>      gt3_rxbufreset_i,
    gt3_rxbufstatus_out             =>      gt3_rxbufstatus_i,
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt3_rxdfelpmreset_in            =>      tied_to_ground_i,
    gt3_rxmonitorout_out            =>      gt3_rxmonitorout_i,
    gt3_rxmonitorsel_in             =>      "00",
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt3_rxratedone_out              =>      gt3_rxratedone_i,
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    gt3_rxoutclkfabric_out          =>      gt3_rxoutclkfabric_i,
    ---------------------- Receive Ports - RX Gearbox Ports --------------------
gt3_rxdatavalid_out             =>      gt3_rxdatavalid_i,
    --gt3_rxdatavalid_out             =>      tm3_RXVALID_i,
gt3_rxheader_out                =>      gt3_rxheader_i,
    --gt3_rxheader_out                =>      tm3_RXHEADER_i,
gt3_rxheadervalid_out           =>      gt3_rxheadervalid_i,
    --gt3_rxheadervalid_out           =>      tm3_RXHEADERVALID_i,
    --------------------- Receive Ports - RX Gearbox Ports  --------------------
    gt3_rxgearboxslip_in            =>      gt3_rxgearboxslip_i,
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt3_gtrxreset_in                =>      tied_to_ground_i,
    gt3_rxpcsreset_in               =>      tied_to_ground_i,
    gt3_rxpmareset_in               =>      gt3_rxpmareset_i,
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt3_rxlpmen_in                  =>      gt3_rxlpmen_i,
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt3_rxpolarity_in               =>      gt3_rxpolarity_i,
    ------------------------ Receive Ports -RX AFE Ports -----------------------
    gt3_gthrxp_in                   =>      RXP_IN(3),
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt3_rxresetdone_out             =>      gt3_rxresetdone_i,
    ------------------------ TX Configurable Driver Ports ----------------------
    gt3_txpostcursor_in             =>      gt3_txpostcursor_i,
    gt3_txprecursor_in              =>      gt3_txprecursor_i,
    --------------------- TX Initialization and Reset Ports --------------------
    gt3_gttxreset_in                =>      tied_to_ground_i,
    gt3_txuserrdy_in                =>      tied_to_ground_i,
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
gt3_txheader_in                 =>      gt3_txheader_r,
    --gt3_txheader_in                 =>      tm3_TXHEADER_i,
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt3_txprbsforceerr_in           =>      gt3_txprbsforceerr_i,
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt3_txbufstatus_out             =>      gt3_txbufstatus_i,
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt3_txdiffctrl_in               =>      "1110",
    gt3_txinhibit_in                =>      gt3_txinhibit_i,
    gt3_txmaincursor_in             =>      "0111000",
    ------------------ Transmit Ports - TX Data Path interface -----------------
gt3_txdata_in                   =>      gt3_scrambled_data_i,
    --gt3_txdata_in                   =>      tm3_TXDATA_i,
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt3_gthtxn_out                  =>      TXN_OUT(3),
    gt3_gthtxp_out                  =>      TXP_OUT(3),
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt3_txoutclkfabric_out          =>      gt3_txoutclkfabric_i,
    gt3_txoutclkpcs_out             =>      gt3_txoutclkpcs_i,
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
gt3_txsequence_in               =>      gt3_txsequence_i,
    --gt3_txsequence_in               =>      tm3_TXSEQ_i,
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt3_txpcsreset_in               =>      tied_to_ground_i,
    gt3_txresetdone_out             =>      gt3_txresetdone_i,
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt3_txpolarity_in               =>      gt3_txpolarity_i,
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt3_txprbssel_in                =>      gt3_txprbssel_i,


--____________________________COMMON PORTS________________________________
    GT0_QPLLLOCK_OUT => open,
    GT0_QPLLREFCLKLOST_OUT  => open,
    GT0_QPLLOUTCLK_OUT  => open,
    GT0_QPLLOUTREFCLK_OUT => open,
    sysclk_in => drpclk_in_i
);

    gt0_track_data_i <= '1';
    gt1_track_data_i <= '1';

IBUFDS_DRP_CLK: IBUFDS
port map
 (
    I  => DRP_CLK_IN_P,
    IB => DRP_CLK_IN_N,
    O  => DRPCLK_IN
 );

DRP_CLK_BUFG: BUFG 
port map 
(
    I    => DRPCLK_IN,
    O    => drpclk_in_i 
);


-------------------------- User Module Resets -----------------------------
-- All the User Modules i.e. FRAME_GEN, FRAME_CHECK and the sync modules
-- are held in reset till the RESETDONE goes high. 
-- The RESETDONE is registered a couple of times on USRCLK2 and connected 
-- to the reset of the modules
    
process(gt0_rxusrclk2_i,gt0_rxresetdone_i)
begin
    if(gt0_rxresetdone_i = '0') then
        gt0_rxresetdone_r  <= '0'   after DLY;
        gt0_rxresetdone_r2 <= '0'   after DLY;
        gt0_rxresetdone_r3 <= '0'   after DLY;
    elsif(gt0_rxusrclk2_i'event and gt0_rxusrclk2_i = '1') then
        gt0_rxresetdone_r  <= gt0_rxresetdone_i   after DLY;
        gt0_rxresetdone_r2 <= gt0_rxresetdone_r   after DLY;
        gt0_rxresetdone_r3  <= gt0_rxresetdone_r2   after DLY;
    end if;
end process;


process(gt0_txusrclk2_i,gt0_txfsmresetdone_i)
begin
    if(gt0_txfsmresetdone_i = '0') then
        gt0_txfsmresetdone_r  <= '0'   after DLY;
        gt0_txfsmresetdone_r2 <= '0'   after DLY;
    elsif(gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
        gt0_txfsmresetdone_r  <= gt0_txfsmresetdone_i   after DLY;
        gt0_txfsmresetdone_r2 <= gt0_txfsmresetdone_r   after DLY;
    end if;
end process;


process(gt1_rxusrclk2_i,gt1_rxresetdone_i)
begin
    if(gt1_rxresetdone_i = '0') then
        gt1_rxresetdone_r  <= '0'   after DLY;
        gt1_rxresetdone_r2 <= '0'   after DLY;
        gt1_rxresetdone_r3 <= '0'   after DLY;
    elsif(gt1_rxusrclk2_i'event and gt1_rxusrclk2_i = '1') then
        gt1_rxresetdone_r  <= gt1_rxresetdone_i   after DLY;
        gt1_rxresetdone_r2 <= gt1_rxresetdone_r   after DLY;
        gt1_rxresetdone_r3  <= gt1_rxresetdone_r2   after DLY;
    end if;
end process;


process(gt1_txusrclk2_i,gt1_txfsmresetdone_i)
begin
    if(gt1_txfsmresetdone_i = '0') then
        gt1_txfsmresetdone_r  <= '0'   after DLY;
        gt1_txfsmresetdone_r2 <= '0'   after DLY;
    elsif(gt1_txusrclk2_i'event and gt1_txusrclk2_i = '1') then
        gt1_txfsmresetdone_r  <= gt1_txfsmresetdone_i   after DLY;
        gt1_txfsmresetdone_r2 <= gt1_txfsmresetdone_r   after DLY;
    end if;
end process;


process(gt2_rxusrclk2_i,gt2_rxresetdone_i)
begin
    if(gt2_rxresetdone_i = '0') then
        gt2_rxresetdone_r  <= '0'   after DLY;
        gt2_rxresetdone_r2 <= '0'   after DLY;
        gt2_rxresetdone_r3 <= '0'   after DLY;
    elsif(gt2_rxusrclk2_i'event and gt2_rxusrclk2_i = '1') then
        gt2_rxresetdone_r  <= gt2_rxresetdone_i   after DLY;
        gt2_rxresetdone_r2 <= gt2_rxresetdone_r   after DLY;
        gt2_rxresetdone_r3  <= gt2_rxresetdone_r2   after DLY;
    end if;
end process;


process(gt2_txusrclk2_i,gt2_txfsmresetdone_i)
begin
    if(gt2_txfsmresetdone_i = '0') then
        gt2_txfsmresetdone_r  <= '0'   after DLY;
        gt2_txfsmresetdone_r2 <= '0'   after DLY;
    elsif(gt2_txusrclk2_i'event and gt2_txusrclk2_i = '1') then
        gt2_txfsmresetdone_r  <= gt2_txfsmresetdone_i   after DLY;
        gt2_txfsmresetdone_r2 <= gt2_txfsmresetdone_r   after DLY;
    end if;
end process;


process(gt3_rxusrclk2_i,gt3_rxresetdone_i)
begin
    if(gt3_rxresetdone_i = '0') then
        gt3_rxresetdone_r  <= '0'   after DLY;
        gt3_rxresetdone_r2 <= '0'   after DLY;
        gt3_rxresetdone_r3 <= '0'   after DLY;
    elsif(gt3_rxusrclk2_i'event and gt3_rxusrclk2_i = '1') then
        gt3_rxresetdone_r  <= gt3_rxresetdone_i   after DLY;
        gt3_rxresetdone_r2 <= gt3_rxresetdone_r   after DLY;
        gt3_rxresetdone_r3  <= gt3_rxresetdone_r2   after DLY;
    end if;
end process;


process(gt3_txusrclk2_i,gt3_txfsmresetdone_i)
begin
    if(gt3_txfsmresetdone_i = '0') then
        gt3_txfsmresetdone_r  <= '0'   after DLY;
        gt3_txfsmresetdone_r2 <= '0'   after DLY;
    elsif(gt3_txusrclk2_i'event and gt3_txusrclk2_i = '1') then
        gt3_txfsmresetdone_r  <= gt3_txfsmresetdone_i   after DLY;
        gt3_txfsmresetdone_r2 <= gt3_txfsmresetdone_r   after DLY;
    end if;
end process;

------------------------------ Frame Generators ---------------------------
-- The example design uses Block RAM based frame generators to provide test
-- data to the GTs for transmission. By default the frame generators are 
-- loaded with an incrementing data sequence that includes commas/alignment
-- characters for alignment. If your protocol uses channel bonding, the 
-- frame generator will also be preloaded with a channel bonding sequence.

-- You can modify the data transmitted by changing the INIT values of the frame
-- generator in this file. Pay careful attention to bit order and the spacing
-- of your control and alignment characters.

--gt0_frame_gen : gtwizard_0_GT_FRAME_GEN
--generic map
--(
--    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM
--)
--port map
--(
--    -- User Interface
--    TX_DATA_OUT(15 downto 0)        =>      gt0_txdata_float16_i,
--    TX_DATA_OUT(79 downto 16)       =>      gt0_txdata_i,
--    TXCTRL_OUT(7 downto 1)          =>      gt0_txctrl_float_i,
--    TXCTRL_OUT(0)                   =>      gt0_txctrl_i,
--    TXDATAVALID_IN                  =>      gt0_txdatavalid_i,
--    -- System Interface
--    USER_CLK                        =>      gt0_txusrclk2_i,
--    SYSTEM_RESET                    =>      gt0_tx_system_reset_c
--);

--gt1_frame_gen : gtwizard_0_GT_FRAME_GEN
--generic map
--(
--    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM
--)
--port map
--(
--    -- User Interface
--    TX_DATA_OUT(15 downto 0)        =>      gt1_txdata_float16_i,
--    TX_DATA_OUT(79 downto 16)       =>      gt1_txdata_i,
--    TXCTRL_OUT(7 downto 1)          =>      gt1_txctrl_float_i,
--    TXCTRL_OUT(0)                   =>      gt1_txctrl_i,
--    TXDATAVALID_IN                  =>      gt1_txdatavalid_i,
--    -- System Interface
--    USER_CLK                        =>      gt1_txusrclk2_i,
--    SYSTEM_RESET                    =>      gt1_tx_system_reset_c
--);

gt2_frame_gen : gtwizard_0_GT_FRAME_GEN
generic map
(
    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM
)
port map
(
    -- User Interface
    TX_DATA_OUT(15 downto 0)        =>      gt2_txdata_float16_i,
    TX_DATA_OUT(79 downto 16)       =>      gt2_txdata_i,
    TXCTRL_OUT(7 downto 1)          =>      gt2_txctrl_float_i,
    TXCTRL_OUT(0)                   =>      gt2_txctrl_i,
    TXDATAVALID_IN                  =>      gt2_txdatavalid_i,
    -- System Interface
    USER_CLK                        =>      gt2_txusrclk2_i,
    SYSTEM_RESET                    =>      gt2_tx_system_reset_c
);

gt3_frame_gen : gtwizard_0_GT_FRAME_GEN
generic map
(
    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM
)
port map
(
    -- User Interface
    TX_DATA_OUT(15 downto 0)        =>      gt3_txdata_float16_i,
    TX_DATA_OUT(79 downto 16)       =>      gt3_txdata_i,
    TXCTRL_OUT(7 downto 1)          =>      gt3_txctrl_float_i,
    TXCTRL_OUT(0)                   =>      gt3_txctrl_i,
    TXDATAVALID_IN                  =>      gt3_txdatavalid_i,
    -- System Interface
    USER_CLK                        =>      gt3_txusrclk2_i,
    SYSTEM_RESET                    =>      gt3_tx_system_reset_c
);



---------------------------------- Frame Checkers -------------------------
-- The example design uses Block RAM based frame checkers to verify incoming  
-- data. By default the frame generators are loaded with a data sequence that 
-- matches the outgoing sequence of the frame generators for the TX ports.

-- You can modify the expected data sequence by changing the INIT values of the frame
-- checkers in this file. Pay careful attention to bit order and the spacing
-- of your control and alignment characters.

-- When the frame checker receives data, it attempts to synchronise to the 
-- incoming pattern by looking for the first sequence in the pattern. Once it 
-- finds the first sequence, it increments through the sequence, and indicates an 
-- error whenever the next value received does not match the expected value.

gt0_frame_check_reset_i                      <= reset_on_data_error_i when (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else gt0_matchn_i;

    -- gt0_frame_check0 is always connected to the lane with the start of char 
    -- and this lane starts off the data checking on all the other lanes. The INC_IN port is tied off
gt0_inc_in_i                                 <= '0';

--gt0_frame_check : gtwizard_0_GT_FRAME_CHECK
--generic map
--(
--    RX_DATA_WIDTH                   =>      64,
--    RXCTRL_WIDTH                    =>      2,
--    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM,
--    START_OF_PACKET_CHAR            =>      x"00000000000000fb"
--)
--port map
--(
--    -- GT Interface
--    RX_DATA_IN                      =>      gt0_unscrambled_data_i,
--    RXENMCOMMADET_OUT               =>      open,
--    RXENPCOMMADET_OUT               =>      open,
--    RXDATAVALID_IN                  =>      gt0_rxdatavalid_i,
--    -- System Interface
--    USER_CLK                        =>      gt0_rxusrclk2_i,
--    SYSTEM_RESET                    =>      gt0_rx_system_reset_c,
--    ERROR_COUNT_OUT                 =>      gt0_error_count_i,
--    TRACK_DATA_OUT                  =>      gt0_track_data_i
--);

gt1_frame_check_reset_i                      <= reset_on_data_error_i when (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else gt1_matchn_i;

    -- in the "independent lanes" configuration, each of the lanes looks for the unique start char and
    -- in this case, the INC_IN port is tied off.
    -- Else, the data checking is triggered by the "master" lane
gt1_inc_in_i                                 <= gt0_inc_out_i when  (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else '0';

--gt1_frame_check : gtwizard_0_GT_FRAME_CHECK
--generic map
--(
--    RX_DATA_WIDTH                   =>      64,
--    RXCTRL_WIDTH                    =>      2,
--    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM,
--    START_OF_PACKET_CHAR            =>      x"00000000000000fb"
--)
--port map
--(
--    -- GT Interface
--    RX_DATA_IN                      =>      gt1_unscrambled_data_i,
--    RXENMCOMMADET_OUT               =>      open,
--    RXENPCOMMADET_OUT               =>      open,
--    RXDATAVALID_IN                  =>      gt1_rxdatavalid_i,
--    -- System Interface
--    USER_CLK                        =>      gt1_rxusrclk2_i,
--    SYSTEM_RESET                    =>      gt1_rx_system_reset_c,
--    ERROR_COUNT_OUT                 =>      gt1_error_count_i,
--    TRACK_DATA_OUT                  =>      gt1_track_data_i
--);

gt2_frame_check_reset_i                      <= reset_on_data_error_i when (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else gt2_matchn_i;

    -- in the "independent lanes" configuration, each of the lanes looks for the unique start char and
    -- in this case, the INC_IN port is tied off.
    -- Else, the data checking is triggered by the "master" lane
gt2_inc_in_i                                 <= gt0_inc_out_i when  (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else '0';

gt2_frame_check : gtwizard_0_GT_FRAME_CHECK
generic map
(
    RX_DATA_WIDTH                   =>      64,
    RXCTRL_WIDTH                    =>      2,
    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM,
    START_OF_PACKET_CHAR            =>      x"00000000000000fb"
)
port map
(
    -- GT Interface
    RX_DATA_IN                      =>      gt2_unscrambled_data_i,
    RXENMCOMMADET_OUT               =>      open,
    RXENPCOMMADET_OUT               =>      open,
    RXDATAVALID_IN                  =>      gt2_rxdatavalid_i,
    -- System Interface
    USER_CLK                        =>      gt2_rxusrclk2_i,
    SYSTEM_RESET                    =>      gt2_rx_system_reset_c,
    ERROR_COUNT_OUT                 =>      gt2_error_count_i,
    TRACK_DATA_OUT                  =>      gt2_track_data_i
);

gt3_frame_check_reset_i                      <= reset_on_data_error_i when (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else gt3_matchn_i;

    -- in the "independent lanes" configuration, each of the lanes looks for the unique start char and
    -- in this case, the INC_IN port is tied off.
    -- Else, the data checking is triggered by the "master" lane
gt3_inc_in_i                                 <= gt0_inc_out_i when  (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else '0';

gt3_frame_check : gtwizard_0_GT_FRAME_CHECK
generic map
(
    RX_DATA_WIDTH                   =>      64,
    RXCTRL_WIDTH                    =>      2,
    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM,
    START_OF_PACKET_CHAR            =>      x"00000000000000fb"
)
port map
(
    -- GT Interface
    RX_DATA_IN                      =>      gt3_unscrambled_data_i,
    RXENMCOMMADET_OUT               =>      open,
    RXENPCOMMADET_OUT               =>      open,
    RXDATAVALID_IN                  =>      gt3_rxdatavalid_i,
    -- System Interface
    USER_CLK                        =>      gt3_rxusrclk2_i,
    SYSTEM_RESET                    =>      gt3_rx_system_reset_c,
    ERROR_COUNT_OUT                 =>      gt3_error_count_i,
    TRACK_DATA_OUT                  =>      gt3_track_data_i
);




--TRACK_DATA_OUT                               <= track_data_out_i;
track_data_out_i                             <= 
                                gt0_track_data_i  and
                                gt1_track_data_i  and
                                gt2_track_data_i  and
                                gt3_track_data_i ;



    --***********************************************************************--
    --                                                                       --
    ----------------------- Logic for 64B66B/67B Encoding----------------------
    --                                                                       --
    --***********************************************************************--

    gt0_txheader_i <= "10" when (gt0_txctrl_i = '1') else "01";

process(gt0_txusrclk2_i)
    begin
    if( gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
       end if;
    end process;

    gt0_tx_reset_i     <=  gt0_tx_system_reset_c;

    --__________________________ Generating Data Valid Signal _________________________   
 


    gt0_data_valid_out_i <=  '1' when (gt0_txsequence_i /= "0011111") else
                                   '0';
    gt0_txdatavalid_i    <=  gt0_data_valid_out_i; 

    process(gt0_txusrclk2_i)
    begin
      if(gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
             gt0_pause_data_valid_r <=  gt0_data_valid_out_i after DLY;
      end if;
    end process;

    gt0_data_valid_i  <= '1' when (gt0_pause_data_valid_r='1') else '0';

    --____________________________ TXSEQUENCE counter to GT __________________________    
    process(gt0_txusrclk2_i)
    begin
      if(gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
        if((gt0_tx_reset_i='1') or (gt0_txseq_counter_r = 32)) then 
             gt0_txseq_counter_r <=  (others => '0') after DLY;
        else 
             gt0_txseq_counter_r <=  gt0_txseq_counter_r + 1 after DLY;
        end if;
      end if;
    end process;
    gt0_txsequence_i(6)           <= '0' after DLY;
    gt0_txsequence_i(5 downto 0)  <= std_logic_vector(gt0_txseq_counter_r(5 downto 0))after DLY;    


    --_____________________________ TXHEADER port to GTH_______________________________
    process(gt0_txusrclk2_i)
    begin
      if(gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
        if(gt0_tx_reset_i='1') then 
                  gt0_txheader_r   <=  (others => '0') after DLY;
        else     
                  gt0_txheader_r   <=  gt0_txheader_i after DLY;
        end if;
      end if;
    end process; 

    -- Extend the system reset to hold the scrambler in reset for a few extra cycles
    -- This is to ensure that the scrambler is in reset till the data appears at the
    -- output of the bram
    process(gt0_txusrclk2_i)
    begin
      if(gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
        gt0_extend_reset_r <=  (gt0_extend_reset_r(2 downto 0) & gt0_tx_reset_i);
      end if;
    end process;  
        
    gt0_reset_r  <=   gt0_extend_reset_r(0) or
                            gt0_extend_reset_r(1) or
                            gt0_extend_reset_r(2) or
                            gt0_extend_reset_r(3);

    gt0_rx_reset_i     <=  gt0_rx_system_reset_c;

    process(gt0_rxusrclk2_i)
    begin
      if(gt0_rxusrclk2_i'event and gt0_rxusrclk2_i = '1') then        
        gt0_rx_reset_i1 <=  gt0_rx_reset_i after DLY ;
        gt0_rx_reset_i2 <=  gt0_rx_reset_i1 after DLY ;
      end if;
    end process;   
    
    gt0_not_block_lock_i   <=   not gt0_block_lock_i;
    gt1_txheader_i <= "10" when (gt1_txctrl_i = '1') else "01";

process(gt1_txusrclk2_i)
begin
    if( gt1_txusrclk2_i'event and gt1_txusrclk2_i = '1') then
    end if;
end process;

    gt1_tx_reset_i     <=  gt1_tx_system_reset_c;

    --__________________________ Generating Data Valid Signal _________________________   
 


    gt1_data_valid_out_i <=  '1' when (gt1_txsequence_i /= "0011111") else
                                   '0';
    gt1_txdatavalid_i    <=  gt1_data_valid_out_i; 

    process(gt1_txusrclk2_i)
    begin
      if(gt1_txusrclk2_i'event and gt1_txusrclk2_i = '1') then
             gt1_pause_data_valid_r <=  gt1_data_valid_out_i after DLY;
      end if;
    end process;

    gt1_data_valid_i  <= '1' when (gt1_pause_data_valid_r='1') else '0';

    --____________________________ TXSEQUENCE counter to GT __________________________    
    process(gt1_txusrclk2_i)
    begin
      if(gt1_txusrclk2_i'event and gt1_txusrclk2_i = '1') then
        if((gt1_tx_reset_i='1') or (gt1_txseq_counter_r = 32)) then 
             gt1_txseq_counter_r <=  (others => '0') after DLY;
        else 
             gt1_txseq_counter_r <=  gt1_txseq_counter_r + 1 after DLY;
        end if;
      end if;
    end process;
    gt1_txsequence_i(6)           <= '0' after DLY;
    gt1_txsequence_i(5 downto 0)  <= std_logic_vector(gt1_txseq_counter_r(5 downto 0))after DLY;    


    --_____________________________ TXHEADER port to GTH_______________________________
    process(gt1_txusrclk2_i)
    begin
      if(gt1_txusrclk2_i'event and gt1_txusrclk2_i = '1') then
        if(gt1_tx_reset_i='1') then 
                  gt1_txheader_r   <=  (others => '0') after DLY;
        else     
                  gt1_txheader_r   <=  gt1_txheader_i after DLY;
        end if;
      end if;
    end process; 

    -- Extend the system reset to hold the scrambler in reset for a few extra cycles
    -- This is to ensure that the scrambler is in reset till the data appears at the
    -- output of the bram
    process(gt1_txusrclk2_i)
    begin
      if(gt1_txusrclk2_i'event and gt1_txusrclk2_i = '1') then
        gt1_extend_reset_r <=  (gt1_extend_reset_r(2 downto 0) & gt1_tx_reset_i);
      end if;
    end process;  
        
    gt1_reset_r  <=   gt1_extend_reset_r(0) or
                            gt1_extend_reset_r(1) or
                            gt1_extend_reset_r(2) or
                            gt1_extend_reset_r(3);

    gt1_rx_reset_i     <=  gt1_rx_system_reset_c;

    process(gt1_rxusrclk2_i)
    begin
      if(gt1_rxusrclk2_i'event and gt1_rxusrclk2_i = '1') then        
        gt1_rx_reset_i1 <=  gt1_rx_reset_i after DLY ;
        gt1_rx_reset_i2 <=  gt1_rx_reset_i1 after DLY ;
      end if;
    end process;   
    
    gt1_not_block_lock_i   <=   not gt1_block_lock_i;
    gt2_txheader_i <= "10" when (gt2_txctrl_i = '1') else "01";

process(gt2_txusrclk2_i)
    begin
if( gt2_txusrclk2_i'event and gt2_txusrclk2_i = '1') then
       end if;
    end process;

    gt2_tx_reset_i     <=  gt2_tx_system_reset_c;

    --__________________________ Generating Data Valid Signal _________________________   
 


    gt2_data_valid_out_i <=  '1' when (gt2_txsequence_i /= "0011111") else
                                   '0';
    gt2_txdatavalid_i    <=  gt2_data_valid_out_i; 

    process(gt2_txusrclk2_i)
    begin
      if(gt2_txusrclk2_i'event and gt2_txusrclk2_i = '1') then
             gt2_pause_data_valid_r <=  gt2_data_valid_out_i after DLY;
      end if;
    end process;

    gt2_data_valid_i  <= '1' when (gt2_pause_data_valid_r='1') else '0';

    --____________________________ TXSEQUENCE counter to GT __________________________    
    process(gt2_txusrclk2_i)
    begin
      if(gt2_txusrclk2_i'event and gt2_txusrclk2_i = '1') then
        if((gt2_tx_reset_i='1') or (gt2_txseq_counter_r = 32)) then 
             gt2_txseq_counter_r <=  (others => '0') after DLY;
        else 
             gt2_txseq_counter_r <=  gt2_txseq_counter_r + 1 after DLY;
        end if;
      end if;
    end process;
    gt2_txsequence_i(6)           <= '0' after DLY;
    gt2_txsequence_i(5 downto 0)  <= std_logic_vector(gt2_txseq_counter_r(5 downto 0))after DLY;    


    --_____________________________ TXHEADER port to GTH_______________________________
    process(gt2_txusrclk2_i)
    begin
      if(gt2_txusrclk2_i'event and gt2_txusrclk2_i = '1') then
        if(gt2_tx_reset_i='1') then 
                  gt2_txheader_r   <=  (others => '0') after DLY;
        else     
                  gt2_txheader_r   <=  gt2_txheader_i after DLY;
        end if;
      end if;
    end process; 

    -- Extend the system reset to hold the scrambler in reset for a few extra cycles
    -- This is to ensure that the scrambler is in reset till the data appears at the
    -- output of the bram
    process(gt2_txusrclk2_i)
    begin
      if(gt2_txusrclk2_i'event and gt2_txusrclk2_i = '1') then
        gt2_extend_reset_r <=  (gt2_extend_reset_r(2 downto 0) & gt2_tx_reset_i);
      end if;
    end process;  
        
    gt2_reset_r  <=   gt2_extend_reset_r(0) or
                            gt2_extend_reset_r(1) or
                            gt2_extend_reset_r(2) or
                            gt2_extend_reset_r(3);

    gt2_rx_reset_i     <=  gt2_rx_system_reset_c;

    process(gt2_rxusrclk2_i)
    begin
      if(gt2_rxusrclk2_i'event and gt2_rxusrclk2_i = '1') then        
        gt2_rx_reset_i1 <=  gt2_rx_reset_i after DLY ;
        gt2_rx_reset_i2 <=  gt2_rx_reset_i1 after DLY ;
      end if;
    end process;   
    
    gt2_not_block_lock_i   <=   not gt2_block_lock_i;
    gt3_txheader_i <= "10" when (gt3_txctrl_i = '1') else "01";

process(gt3_txusrclk2_i)
    begin
if( gt3_txusrclk2_i'event and gt3_txusrclk2_i = '1') then
       end if;
    end process;

    gt3_tx_reset_i     <=  gt3_tx_system_reset_c;

    --__________________________ Generating Data Valid Signal _________________________   
 


    gt3_data_valid_out_i <=  '1' when (gt3_txsequence_i /= "0011111") else
                                   '0';
    gt3_txdatavalid_i    <=  gt3_data_valid_out_i; 

    process(gt3_txusrclk2_i)
    begin
      if(gt3_txusrclk2_i'event and gt3_txusrclk2_i = '1') then
             gt3_pause_data_valid_r <=  gt3_data_valid_out_i after DLY;
      end if;
    end process;

    gt3_data_valid_i  <= '1' when (gt3_pause_data_valid_r='1') else '0';

    --____________________________ TXSEQUENCE counter to GT __________________________    
    process(gt3_txusrclk2_i)
    begin
      if(gt3_txusrclk2_i'event and gt3_txusrclk2_i = '1') then
        if((gt3_tx_reset_i='1') or (gt3_txseq_counter_r = 32)) then 
             gt3_txseq_counter_r <=  (others => '0') after DLY;
        else 
             gt3_txseq_counter_r <=  gt3_txseq_counter_r + 1 after DLY;
        end if;
      end if;
    end process;
    gt3_txsequence_i(6)           <= '0' after DLY;
    gt3_txsequence_i(5 downto 0)  <= std_logic_vector(gt3_txseq_counter_r(5 downto 0))after DLY;    


    --_____________________________ TXHEADER port to GTH_______________________________
    process(gt3_txusrclk2_i)
    begin
      if(gt3_txusrclk2_i'event and gt3_txusrclk2_i = '1') then
        if(gt3_tx_reset_i='1') then 
                  gt3_txheader_r   <=  (others => '0') after DLY;
        else     
                  gt3_txheader_r   <=  gt3_txheader_i after DLY;
        end if;
      end if;
    end process; 

    -- Extend the system reset to hold the scrambler in reset for a few extra cycles
    -- This is to ensure that the scrambler is in reset till the data appears at the
    -- output of the bram
    process(gt3_txusrclk2_i)
    begin
      if(gt3_txusrclk2_i'event and gt3_txusrclk2_i = '1') then
        gt3_extend_reset_r <=  (gt3_extend_reset_r(2 downto 0) & gt3_tx_reset_i);
      end if;
    end process;  
        
    gt3_reset_r  <=   gt3_extend_reset_r(0) or
                            gt3_extend_reset_r(1) or
                            gt3_extend_reset_r(2) or
                            gt3_extend_reset_r(3);

    gt3_rx_reset_i     <=  gt3_rx_system_reset_c;

    process(gt3_rxusrclk2_i)
    begin
      if(gt3_rxusrclk2_i'event and gt3_rxusrclk2_i = '1') then        
        gt3_rx_reset_i1 <=  gt3_rx_reset_i after DLY ;
        gt3_rx_reset_i2 <=  gt3_rx_reset_i1 after DLY ;
      end if;
    end process;   
    
    gt3_not_block_lock_i   <=   not gt3_block_lock_i;

    --________________________ Block Sync State Machine _______________________
--    block_sync_sm_0_i  :  gtwizard_0_BLOCK_SYNC_SM 
--    generic map
--    (
--        SH_CNT_MAX          => 64,    
--        SH_INVALID_CNT_MAX  => 16    
--    )
--    port map
--    (
--        -- User Interface
--        BLOCKSYNC_OUT             =>    gt0_block_lock_i,
--        RXGEARBOXSLIP_OUT         =>    gt0_rxgearboxslip_i,
--        RXHEADER_IN(2)            =>    tied_to_ground_i,
--        RXHEADER_IN(1 downto 0)   =>    gt0_rxheader_i,
--        RXHEADERVALID_IN          =>    gt0_rxheadervalid_i,

--        -- System Interface
--        USER_CLK                  =>    gt0_rxusrclk2_i,
--        SYSTEM_RESET              =>    gt0_rx_reset_i2
--    );

--    --___________________ Descrambler for 64B66B/67B decoding _________________    
--    descrambler_0_i  :  gtwizard_0_DESCRAMBLER 
--    generic map
--    (
--    RX_DATA_WIDTH         =>     64
--    )
--    port map
--    (
--        -- User Interface
--        SCRAMBLED_DATA_IN     =>     gt0_rxdata_i,
--        UNSCRAMBLED_DATA_OUT  =>     gt0_unscrambled_data_i,
--        DATA_VALID_IN         =>     gt0_rxdatavalid_i,

--        -- System Interface
--        USER_CLK              =>     gt0_rxusrclk2_i,
--        SYSTEM_RESET          =>     gt0_not_block_lock_i
--    );

--    scrambler_0_i  :  gtwizard_0_SCRAMBLER
--    generic map
--    (
--    TX_DATA_WIDTH       =>     64
--    )
--    port map
--    (
--        -- User Interface
--        UNSCRAMBLED_DATA_IN =>     gt0_txdata_i,
--        SCRAMBLED_DATA_OUT  =>     gt0_scrambled_data_i,
--        DATA_VALID_IN       =>     gt0_data_valid_i,

--        -- System Interface
--        USER_CLK            =>     gt0_txusrclk2_i,
--        SYSTEM_RESET        =>     gt0_reset_r
--    );
--    --________________________ Block Sync State Machine _______________________
--    block_sync_sm_1_i  :  gtwizard_0_BLOCK_SYNC_SM 
--    generic map
--    (
--        SH_CNT_MAX          => 64,    
--        SH_INVALID_CNT_MAX  => 16    
--    )
--    port map
--    (
--        -- User Interface
--        BLOCKSYNC_OUT             =>    gt1_block_lock_i,
--        RXGEARBOXSLIP_OUT         =>    gt1_rxgearboxslip_i,
--        RXHEADER_IN(2)            =>    tied_to_ground_i,
--        RXHEADER_IN(1 downto 0)   =>    gt1_rxheader_i,
--        RXHEADERVALID_IN          =>    gt1_rxheadervalid_i,

--        -- System Interface
--        USER_CLK                  =>    gt1_rxusrclk2_i,
--        SYSTEM_RESET              =>    gt1_rx_reset_i2
--    );

--    --___________________ Descrambler for 64B66B/67B decoding _________________    
--    descrambler_1_i  :  gtwizard_0_DESCRAMBLER 
--    generic map
--    (
--    RX_DATA_WIDTH         =>     64
--    )
--    port map
--    (
--        -- User Interface
--        SCRAMBLED_DATA_IN     =>     gt1_rxdata_i,
--        UNSCRAMBLED_DATA_OUT  =>     gt1_unscrambled_data_i,
--        DATA_VALID_IN         =>     gt1_rxdatavalid_i,

--        -- System Interface
--        USER_CLK              =>     gt1_rxusrclk2_i,
--        SYSTEM_RESET          =>     gt1_not_block_lock_i
--    );

--    scrambler_1_i  :  gtwizard_0_SCRAMBLER
--    generic map
--    (
--    TX_DATA_WIDTH       =>     64
--    )
--    port map
--    (
--        -- User Interface
--        UNSCRAMBLED_DATA_IN =>     gt1_txdata_i,
--        SCRAMBLED_DATA_OUT  =>     gt1_scrambled_data_i,
--        DATA_VALID_IN       =>     gt1_data_valid_i,

--        -- System Interface
--        USER_CLK            =>     gt1_txusrclk2_i,
--        SYSTEM_RESET        =>     gt1_reset_r
--    );
    --________________________ Block Sync State Machine _______________________
    block_sync_sm_2_i  :  gtwizard_0_BLOCK_SYNC_SM 
    generic map
    (
        SH_CNT_MAX          => 64,    
        SH_INVALID_CNT_MAX  => 16    
    )
    port map
    (
        -- User Interface
        BLOCKSYNC_OUT             =>    gt2_block_lock_i,
        RXGEARBOXSLIP_OUT         =>    gt2_rxgearboxslip_i,
        RXHEADER_IN(2)            =>    tied_to_ground_i,
        RXHEADER_IN(1 downto 0)   =>    gt2_rxheader_i,
        RXHEADERVALID_IN          =>    gt2_rxheadervalid_i,

        -- System Interface
        USER_CLK                  =>    gt2_rxusrclk2_i,
        SYSTEM_RESET              =>    gt2_rx_reset_i2
    );

    --___________________ Descrambler for 64B66B/67B decoding _________________    
    descrambler_2_i  :  gtwizard_0_DESCRAMBLER 
    generic map
    (
    RX_DATA_WIDTH         =>     64
    )
    port map
    (
        -- User Interface
        SCRAMBLED_DATA_IN     =>     gt2_rxdata_i,
        UNSCRAMBLED_DATA_OUT  =>     gt2_unscrambled_data_i,
        DATA_VALID_IN         =>     gt2_rxdatavalid_i,

        -- System Interface
        USER_CLK              =>     gt2_rxusrclk2_i,
        SYSTEM_RESET          =>     gt2_not_block_lock_i
    );

    scrambler_2_i  :  gtwizard_0_SCRAMBLER
    generic map
    (
    TX_DATA_WIDTH       =>     64
    )
    port map
    (
        -- User Interface
        UNSCRAMBLED_DATA_IN =>     gt2_txdata_i,
        SCRAMBLED_DATA_OUT  =>     gt2_scrambled_data_i,
        DATA_VALID_IN       =>     gt2_data_valid_i,

        -- System Interface
        USER_CLK            =>     gt2_txusrclk2_i,
        SYSTEM_RESET        =>     gt2_reset_r
    );
    --________________________ Block Sync State Machine _______________________
    block_sync_sm_3_i  :  gtwizard_0_BLOCK_SYNC_SM 
    generic map
    (
        SH_CNT_MAX          => 64,    
        SH_INVALID_CNT_MAX  => 16    
    )
    port map
    (
        -- User Interface
        BLOCKSYNC_OUT             =>    gt3_block_lock_i,
        RXGEARBOXSLIP_OUT         =>    gt3_rxgearboxslip_i,
        RXHEADER_IN(2)            =>    tied_to_ground_i,
        RXHEADER_IN(1 downto 0)   =>    gt3_rxheader_i,
        RXHEADERVALID_IN          =>    gt3_rxheadervalid_i,

        -- System Interface
        USER_CLK                  =>    gt3_rxusrclk2_i,
        SYSTEM_RESET              =>    gt3_rx_reset_i2
    );

    --___________________ Descrambler for 64B66B/67B decoding _________________    
    descrambler_3_i  :  gtwizard_0_DESCRAMBLER 
    generic map
    (
    RX_DATA_WIDTH         =>     64
    )
    port map
    (
        -- User Interface
        SCRAMBLED_DATA_IN     =>     gt3_rxdata_i,
        UNSCRAMBLED_DATA_OUT  =>     gt3_unscrambled_data_i,
        DATA_VALID_IN         =>     gt3_rxdatavalid_i,

        -- System Interface
        USER_CLK              =>     gt3_rxusrclk2_i,
        SYSTEM_RESET          =>     gt3_not_block_lock_i
    );

    scrambler_3_i  :  gtwizard_0_SCRAMBLER
    generic map
    (
    TX_DATA_WIDTH       =>     64
    )
    port map
    (
        -- User Interface
        UNSCRAMBLED_DATA_IN =>     gt3_txdata_i,
        SCRAMBLED_DATA_OUT  =>     gt3_scrambled_data_i,
        DATA_VALID_IN       =>     gt3_data_valid_i,

        -- System Interface
        USER_CLK            =>     gt3_txusrclk2_i,
        SYSTEM_RESET        =>     gt3_reset_r
    );

-------------------------------------------------------------------------------
----------------------------- Debug Signals assignment -----------------------

------------ optional Ports assignments --------------
gt0_rxprbscntreset_i                         <= tied_to_ground_i;
gt0_rxprbssel_i                              <= (others => '0');
gt0_loopback_i                               <= (others => '0');
 
gt0_txdiffctrl_i                             <= (others => '0');
gt0_rxbufreset_i                             <= tied_to_ground_i;
gt0_rxcdrhold_i                              <= tied_to_ground_i;
 ------GTH/GTP
gt0_rxdfelpmreset_i                          <= tied_to_ground_i;
gt0_rxpmareset_i                             <= tied_to_ground_i;
gt0_rxpolarity_i                             <= tied_to_ground_i;
gt0_txprecursor_i                            <= (others => '0');
gt0_txpostcursor_i                           <= (others => '0');
gt0_txmaincursor_i                           <= (others => '0');
gt0_rxrate_i                                 <= (others => '0');
gt0_txinhibit_i                              <= tied_to_ground_i;
gt0_txpolarity_i                             <= tied_to_ground_i;
gt0_txprbsforceerr_i                         <= tied_to_ground_i;
gt0_txprbssel_i                              <= (others => '0');
gt1_rxprbscntreset_i                         <= tied_to_ground_i;
gt1_rxprbssel_i                              <= (others => '0');
gt1_loopback_i                               <= (others => '0');
 
gt1_txdiffctrl_i                             <= (others => '0');
gt1_rxbufreset_i                             <= tied_to_ground_i;
gt1_rxcdrhold_i                              <= tied_to_ground_i;
 ------GTH/GTP
gt1_rxdfelpmreset_i                          <= tied_to_ground_i;
gt1_rxpmareset_i                             <= tied_to_ground_i;
gt1_rxpolarity_i                             <= tied_to_ground_i;
gt1_txprecursor_i                            <= (others => '0');
gt1_txpostcursor_i                           <= (others => '0');
gt1_txmaincursor_i                           <= (others => '0');
gt1_rxrate_i                                 <= (others => '0');
gt1_txinhibit_i                              <= tied_to_ground_i;
gt1_txpolarity_i                             <= tied_to_ground_i;
gt1_txprbsforceerr_i                         <= tied_to_ground_i;
gt1_txprbssel_i                              <= (others => '0');
gt2_rxprbscntreset_i                         <= tied_to_ground_i;
gt2_rxprbssel_i                              <= (others => '0');
gt2_loopback_i                               <= (others => '0');
 
gt2_txdiffctrl_i                             <= (others => '0');
gt2_rxbufreset_i                             <= tied_to_ground_i;
gt2_rxcdrhold_i                              <= tied_to_ground_i;
 ------GTH/GTP
gt2_rxdfelpmreset_i                          <= tied_to_ground_i;
gt2_rxpmareset_i                             <= tied_to_ground_i;
gt2_rxpolarity_i                             <= tied_to_ground_i;
gt2_txprecursor_i                            <= (others => '0');
gt2_txpostcursor_i                           <= (others => '0');
gt2_txmaincursor_i                           <= (others => '0');
gt2_rxrate_i                                 <= (others => '0');
gt2_txinhibit_i                              <= tied_to_ground_i;
gt2_txpolarity_i                             <= tied_to_ground_i;
gt2_txprbsforceerr_i                         <= tied_to_ground_i;
gt2_txprbssel_i                              <= (others => '0');
gt3_rxprbscntreset_i                         <= tied_to_ground_i;
gt3_rxprbssel_i                              <= (others => '0');
gt3_loopback_i                               <= (others => '0');
 
gt3_txdiffctrl_i                             <= (others => '0');
gt3_rxbufreset_i                             <= tied_to_ground_i;
gt3_rxcdrhold_i                              <= tied_to_ground_i;
 ------GTH/GTP
gt3_rxdfelpmreset_i                          <= tied_to_ground_i;
gt3_rxpmareset_i                             <= tied_to_ground_i;
gt3_rxpolarity_i                             <= tied_to_ground_i;
gt3_txprecursor_i                            <= (others => '0');
gt3_txpostcursor_i                           <= (others => '0');
gt3_txmaincursor_i                           <= (others => '0');
gt3_rxrate_i                                 <= (others => '0');
gt3_txinhibit_i                              <= tied_to_ground_i;
gt3_txpolarity_i                             <= tied_to_ground_i;
gt3_txprbsforceerr_i                         <= tied_to_ground_i;
gt3_txprbssel_i                              <= (others => '0');
------------------------------------------------------ 
    gt0_rxlpmen_i                                <= tied_to_ground_i;
    gt1_rxlpmen_i                                <= tied_to_ground_i;
    gt2_rxlpmen_i                                <= tied_to_ground_i;
    gt3_rxlpmen_i                                <= tied_to_ground_i;


    -- assign resets for frame_gen modules
gt0_tx_system_reset_c                        <= not gt0_txfsmresetdone_r2;
gt1_tx_system_reset_c                        <= not gt1_txfsmresetdone_r2;
gt2_tx_system_reset_c                        <= not gt2_txfsmresetdone_r2;
gt3_tx_system_reset_c                        <= not gt3_txfsmresetdone_r2;

    -- assign resets for frame_check modules
gt0_rx_system_reset_c                        <= not gt0_rxresetdone_r3;
gt1_rx_system_reset_c                        <= not gt1_rxresetdone_r3;
gt2_rx_system_reset_c                        <= not gt2_rxresetdone_r3;
gt3_rx_system_reset_c                        <= not gt3_rxresetdone_r3;


gt0_drpaddr_i <= (others => '0');
gt0_drpdi_i <= (others => '0');
gt0_drpen_i <= '0';
gt0_drpwe_i <= '0';
gt1_drpaddr_i <= (others => '0');
gt1_drpdi_i <= (others => '0');
gt1_drpen_i <= '0';
gt1_drpwe_i <= '0';
gt2_drpaddr_i <= (others => '0');
gt2_drpdi_i <= (others => '0');
gt2_drpen_i <= '0';
gt2_drpwe_i <= '0';
gt3_drpaddr_i <= (others => '0');
gt3_drpdi_i <= (others => '0');
gt3_drpen_i <= '0';
gt3_drpwe_i <= '0';

  soft_reset_i <= tied_to_ground_i;

end RTL;


